@model SME.SR.Infra.RelatorioControlePlanejamentoDiarioDto

@{ int contadorQuebrarPagina = 0;
    int contadorMaximoLinhasPorPagina = 46;
    int contadorPagina = 0;
    var retornoVerificacao = string.Empty;

    string VerificaQuebra()
    {
        if (contadorQuebrarPagina >= contadorMaximoLinhasPorPagina)
        {
            contadorQuebrarPagina = 0;
            contadorPagina = contadorPagina + 1;

            var str = MontarCabecalho();
            return $@"<div style='page-break-before:always' />" + str;

        }
        return string.Empty;

    }

    string MontarCabecalho()
    {
        contadorQuebrarPagina = contadorQuebrarPagina + 7;

        var str = $@"<div class='titulo-sgp'>SGP - SISTEMA DE GESTÃO PEDAGÓGICA</div>
                        <div class='titulo-plano-aula'>
                            <p style='margin-bottom: 0'>
                                RELATÓRIO DE CONTROLE DE PLANEJAMENTO DIÁRIO
                            </p>
                        </div>
                        <div class='fonte-14 header-pagina'>
                        <table class='tblTopo'>
                            <tbody>
                                <tr>
                                    <td  width='40%' class='sem-border-bottom'>DRE: {Model.Filtro.Dre}</td>
                                    <td width='40%' class='sem-border-bottom'>UE: {Model.Filtro.Ue}</td>
                                    <td  width='20%' class='sem-border-bottom'>TURMA: {Model.Filtro.Turma}</td>
                                </tr>
                            </tbody>
                        </table>

                        <table>
                            <tbody>
                                <tr>
                                    <td width='70%' class='sem-border-bottom'>COMPONENTE CURRICULAR: {Model.Filtro.ComponenteCurricular}</td>
                                    <td width='30%' class='sem-border-bottom'>BIMESTRE: {Model.Filtro.Bimestre}</td>
                                </tr>
                            </tbody>
                        </table>

                        <table>
                            <tbody>
                                <tr>
                                    <td width='60%'>USUÁRIO: {Model.Filtro.Usuario}</td>
                                    <td width='20%'>RF: {Model.Filtro.RF}</td>
                                    <td width='20%'>DATA: {Model.Filtro.Data}</td>
                                </tr>
                            </tbody>
                        </table>
                      </div>";
        return str;
    }
    string MontarCabecalhoTipoRelatorio()
    {
        contadorQuebrarPagina += 1;
        return $@"<table class='fixed'>
                    <tr>
                        <td width='100%' class='td-titulo-um'>
                            PLANO DE AULA
                        </td>
                    </tr>
                  </table>";
    }

    string MontarCabecalhoPlanejamento(string quebra, string componente)
    {
        contadorQuebrarPagina += 2;
        var str = "";
        str += MontarCabecalhoTipoRelatorio();

        if (!String.IsNullOrEmpty(quebra) && componente != "" && (string.IsNullOrEmpty(Model.Filtro.ComponenteCurricular) || Model.Filtro.ComponenteCurricular == "Todos"))
        {
            str += $@"<table class='fixed'>
                        <thead>
                          <tr>
                            <th>{componente.ToUpper()}</th>
                          </tr>;
                        </thead>
                      </table>";
        }
        str += $@" <table class='fixed'>
                    <tr>
                        <td width='15%' class='td-titulo-dois'>DATA AULA</td>
                        <td width='15%' class='td-titulo-dois'>QUANTIDADE DE AULAS</td>
                        <td width='15%' class='td-titulo-dois'>PLANEJAMENTO REALIZADO</td>
                        <td width='15%' class='td-titulo-dois'>DATA DO REGISTRO</td>
                        <td width='15%' class='td-titulo-dois'>USUÁRIO</td>
                        <td width='30%' class='td-titulo-dois'>SEÇÕES PREENCHIDAS</td>
                    </tr>
                   </table>";

        return str;
    }

    string MontarCabecalhoLeituraComunicadoTurma(bool bordaTop = false)
    {
        contadorQuebrarPagina = contadorQuebrarPagina + 1;
        var str = "";
        var borda = bordaTop ? "td-titulo-dois" : "td-titulo-tres";

        str += $@"</table><table class='fixed'>
            <tr>
                <td width='25%' class='{borda}'>TURMA</td>
                <td width='25%' class='{borda}'>NÃO INSTALADO</td>
                <td width='25%' class='{borda}'>NÃO VISUALIZADO</td>
                <td width='25%' class='{borda}'>VISUALIZADO</td>";
        return str;
    }

    string MontarRodapeLeituraComunicadoTurma()
    {
        contadorQuebrarPagina += 1;
        return $@"</table><table class='fixed'>
            <tr>
                <td class='td-valor-quatro'></td>
            </tr>
        </table>";
    }

    string MontarCabecalhoLeituraComunicadoTurmaEstudante()
    {
        var str = "";

        str += $@"
<table class='fixed'>
<tr>
        <td width='7%' class='td-titulo-tres'>N°</td>
        <td width='25%' class='td-titulo-tres'>ESTUDANTE</td>
        <td width='25%' class='td-titulo-tres'>RESPONSÁVEL</td>
        <td width='13%' class='td-titulo-tres'>CONTATO DO RESPONSÁVEL</td>
        <td width='15%' class='td-titulo-tres'>SITUAÇÃO</td>
    </tr>";
        return str;
    }

    string MontarDadosTabelaPlanejamento(IEnumerable<SME.SR.Infra.PlanejamentoDiarioDto> planejamentoDiario, string componente, SME.SR.Infra.TurmaPlanejamentoDiarioDto turma)
    {
        var adicionouRodape = false;
        var str = "";

        str += "<table class='fixed'>";

        for (int i = 0; i < planejamentoDiario.Count(); i++)
        {
            adicionouRodape = false;
            var planejamento = planejamentoDiario.ElementAt(i);


            str += $@"<tr>
                        <td width='15%' class='td-valor-dois'>{planejamento.DataAula}</td>
                        <td width='15%' class='td-valor-dois'>{planejamento.QuantidadeAulas}</td>
                        <td width='15%' class='td-valor-dois'>{planejamento.PlanejamentoRealizado}</td>
                        <td width='15%' class='td-valor-dois'>{planejamento.DateRegistro}</td>
                        <td width='15%' class='td-valor-dois'>{planejamento.Usuario}</td>
                        <td width='30%' class='td-valor-dois'>{planejamento.SecoesPreenchidas}</td>
                    </tr>";

            contadorQuebrarPagina += 1;

            var quebra = VerificaQuebra();

            var novaPagina = quebra + (i < planejamentoDiario.Count() - 1 ? MontarCabecalhoPlanejamento(quebra, componente) : "");
            str += quebra.Length > 0 ? $@"</tbody></table>{novaPagina}<table class='tabela-alunos'><tbody>" : "";

            //if (comunicado.LeituraComunicadoTurma.Any())
            //{
            //    adicionouRodape = false;
            //    str += MontarCabecalhoLeituraComunicadoTurma();
            //    var ultimoLeituraComunicadoTurma = comunicado.LeituraComunicadoTurma.LastOrDefault().Turma;
            //    foreach (var leituraComunicadoTurma in comunicado.LeituraComunicadoTurma)
            //    {
            //        contadorQuebrarPagina += 1;
            //        str += $@"<tr>
            //    <td width='25%' class='td-valor-dois'>{leituraComunicadoTurma.Turma}</td>
            //    <td width='25%' class='td-valor-dois'>{leituraComunicadoTurma.NaoInstalado}</td>
            //    <td width='25%' class='td-valor-dois'>{leituraComunicadoTurma.NaoVisualizado}</td>
            //    <td width='25%' class='td-valor-dois'>{leituraComunicadoTurma.Visualizado}</td>
            //</tr>";

            //        if (leituraComunicadoTurma.LeituraComunicadoEstudantes.Any())
            //        {
            //            str += MontarCabecalhoLeituraComunicadoTurmaEstudante();
            //            contadorQuebrarPagina += 1;
            //            var ultimoLeituraComunicadoTurmaEstudante = leituraComunicadoTurma.LeituraComunicadoEstudantes.LastOrDefault().CodigoEstudante;
            //            foreach (var leituraComunicadoTurmaEstudante in leituraComunicadoTurma.LeituraComunicadoEstudantes)
            //            {
            //                contadorQuebrarPagina += 1;
            //                str += $@"<tr>
            //            <td width='7%' class='td-valor-dois'>{leituraComunicadoTurmaEstudante.NumeroChamada}</td>
            //            <td width='25%' class='td-valor-dois'>{leituraComunicadoTurmaEstudante.Estudante} ({leituraComunicadoTurmaEstudante.CodigoEstudante})</td>
            //            <td width='25%' class='td-valor-dois'>{leituraComunicadoTurmaEstudante.Responsavel} {leituraComunicadoTurmaEstudante.TipoResponsavel}</td>
            //            <td width='13%' class='td-valor-dois'>{leituraComunicadoTurmaEstudante.ContatoResponsavel}</td>
            //            <td width='15%' class='td-valor-dois'>{leituraComunicadoTurmaEstudante.Situacao}</td>
            //        </tr>";

            //                retornoVerificacao = VerificaQuebra();
            //                if (retornoVerificacao != string.Empty)
            //                {
            //                    if (ultimoLeituraComunicadoTurmaEstudante.Equals(leituraComunicadoTurmaEstudante.CodigoEstudante))
            //                    {
            //                        str += $@"</table>{retornoVerificacao}";
            //                    }
            //                    else
            //                    {
            //                        str += $@"</table>{retornoVerificacao}{MontarCabecalhoLeituraComunicadoTurmaEstudante()}";
            //                    }
            //                }
            //            }

            //            if (contadorQuebrarPagina > 8 && leituraComunicadoTurma.LeituraComunicadoEstudantes.Any())
            //            {
            //                adicionouRodape = true;
            //                str += MontarRodapeLeituraComunicadoTurma();
            //                str += "<table class='fixed'>";
            //            }
            //            else
            //            {
            //                str += MontarCabecalhoLeituraComunicadoTurmaEstudante();
            //            }
            //        }

            //        retornoVerificacao = VerificaQuebra();
            //        if (retornoVerificacao != string.Empty)
            //        {
            //            if (ultimoLeituraComunicadoTurma.Equals(leituraComunicadoTurma.Turma))
            //            {
            //                str += $@"</table>{retornoVerificacao}";
            //            }
            //            else
            //            {
            //                str += $@"</table>{retornoVerificacao}{MontarCabecalhoLeituraComunicadoTurma(true)}";
            //            }
            //        }
            //    }
            //    if (contadorQuebrarPagina > 8 && comunicado.LeituraComunicadoTurma.Any())
            //    {
            //        if (!adicionouRodape)
            //        {
            //            str += MontarRodapeLeituraComunicadoTurma();
            //        }
            //    }
            //    else
            //    {
            //        str += MontarCabecalhoLeituraComunicado();
            //    }

            //    str += "<table class='fixed'>";
            //}

            //retornoVerificacao = VerificaQuebra();
            //if (retornoVerificacao != string.Empty)
            //{
            //    str += $@"</table>{retornoVerificacao}{MontarCabecalhoLeituraComunicado()}<table class='fixed'>";
            //}

        }
        return str;
    }
}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RELATÓRIO DE CONTROLE DE PLANEJAMENTO DIÁRIO</title>
</head>

<body class="body-rel-faltas-frequencia">
    <style>
        .body-rel-faltas-frequencia {
            margin: 0.5cm auto;
            font-family: Roboto, sans-serif;
            width: 21cm;
            min-height: 29.7cm;
            background: white;
            color: #42474a;
        }

        .titulo-sgp {
            text-align: right;
            font-size: 14px;
            font-weight: bold;
        }

        .titulo-plano-aula {
            text-align: right;
            font-size: 14.5px;
        }

        .img-logo-sgp {
            height: 64px;
            float: left;
        }

        .header-pagina {
            margin-top: 33px;
            margin-bottom: 22px;
        }

            .header-pagina td {
                text-align: left;
                padding: 4px;
                padding-left: 15px;
            }

        .campo-dre {
            width: 25%;
        }

        .campo-ue {
            width: 60%;
        }

        .campo-ano {
            width: 15%;
        }

        .campo-componente-curricular {
            width: 70%;
            border-top: none;
        }

        .campo-bimestre {
            width: 30%;
            border-top: none;
        }

        .campo-usuario {
            width: 60%;
            border-top: none;
        }

        .campo-rf-data {
            width: 20%;
            border-top: none;
        }

        table {
            display: table;
            width: 100%;
            border-color: #42474a;
            empty-cells: show;
            border: none;
            border-collapse: collapse;
        }

        thead {
            background-color: #f3f3f3;
        }

        th {
            border: 1px solid #42474a;
            font-weight: normal;
        }

        td {
            border: 1px solid #42474a;
        }

        .fonte-16 {
            font-size: 16px !important;
        }

        .fonte-14 {
            font-size: 14px !important;
        }

        .fonte-12 {
            font-size: 12px !important;
        }

        .alinhar-esquerda {
            text-align: left;
        }

        .rodape-rel-faltas-frequencia {
            margin-top: 10px;
            font-size: 9px;
            font-weight: bold;
        }

        .titulo-sgp-rodape {
            float: left;
        }

        .contador-pagina {
            float: right;
            font-size: 15px;
        }

        .thLimpo {
            background-color: #ffffff;
        }

        .tb-head {
            background-color: #f3f3f3;
            text-align: left;
            font-size: 16px;
            padding: 10px;
            padding-left: 20px;
        }

        .td-titulo-um {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 14px;
            padding: 4px;
            border-bottom: none;
        }

        .td-titulo-dois {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 12px;
            padding: 4px;
            border-bottom: none;
        }

        .td-titulo-tres {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 12px;
            padding: 4px;
            border-top: none;
            border-bottom: none;
        }

        .td-valor-dois {
            text-align: center;
            font-size: 12px;
            padding: 2px;
            padding: 4px;
        }

        .td-valor-tres {
            text-align: left;
            font-size: 12px;
            padding: 4px;
            padding-left: 10px;
        }

        .td-valor-quatro {
            text-align: left;
            font-size: 12px;
            padding: 4px;
            padding-left: 10px;
            border-top: none;
            border-bottom: none;
        }

        .caixa-1 {
            text-align: justify;
            padding: 20px 15px 20px 15px;
        }

        .caixa-2 {
            padding: 10px 15px 10px 15px;
            text-align: justify;
            border-top: none;
        }

        .h-50 {
            height: 50px;
        }

        .m-30 {
            margin-top: 30px;
        }

        .tabela-objetivos-items-tr {
            height: 50px;
        }

        .tabela-objetivos-items-titulo {
            padding: 20px 15px 20px 15px;
            border-top: none;
            text-align: center;
            font-weight: bold;
            width: 15%;
        }

        .tabela-objetivos-items-descricao {
            border-top: none;
            width: 85%;
            text-align: justify;
            padding: 5px 15px 5px 15px;
            font-size: 14px;
        }

        table.fixed {
            table-layout: fixed;
        }

            table.fixed td {
                overflow: hidden;
            }
    </style>
    <div>
        <div>
            <img class="img-logo-sgp" src="logoMono.png" alt="Logo SGP" />
        </div>
        @Html.Raw(MontarCabecalho())
    <div>
        @{ 
            var bimestreDescricaoAnt = "";
            foreach (var turma in Model.Turmas)
            {
                @if (turma.Bimestres != null || !turma.Bimestres.Any())
                 {
                    bimestreDescricaoAnt = "";

                    foreach (var bimestre in turma.Bimestres)
                    {
                        @if (bimestre.ComponentesCurriculares != null || bimestre.ComponentesCurriculares.Any())
                        {
                            foreach (var componente in bimestre.ComponentesCurriculares) 
                            {
                                // TURMA
                                if (Model.Filtro.Turma == "Todas" || Model.Filtro.Turma == "")
                                {
                                    contadorQuebrarPagina = contadorQuebrarPagina + 1;
                                    @Html.Raw(VerificaQuebra())
                            
                                    <table class="tabela-alunos">
                                        <thead>
                                            <tr>
                                                <th class="sem-border-bottom">@turma.Nome.ToUpper()</th>
                                            </tr>
                                        </thead>
                                    </table>
                                }

                                // BIMESTRE
                                if(!bimestreDescricaoAnt.Equals(bimestre.Nome))
                                {
                                    if (Model.Filtro.Bimestre == "Todos" || Model.Filtro.Bimestre == "")
                                    {
                                        contadorQuebrarPagina = contadorQuebrarPagina + 1;
                                    @Html.Raw(VerificaQuebra())

                                    <table class="tabela-alunos">
                                        <thead>
                                            <tr>
                                                <th class="sem-border-bottom">@bimestre.Nome.ToUpper()</th>
                                            </tr>
                                        </thead>
                                    </table>
                                    }
                                    bimestreDescricaoAnt = bimestre.Nome;
                                }

                                // COMPONENTE CURRICULAR
                                if (string.IsNullOrEmpty(Model.Filtro.ComponenteCurricular) || Model.Filtro.ComponenteCurricular == "Todos")
                                {
                                    contadorQuebrarPagina = contadorQuebrarPagina + 1;
                                    @Html.Raw(VerificaQuebra())

                                    <table class="tabela-alunos">
                                        <thead>
                                            <tr>
                                                <th class="sem-border-bottom">@componente.Nome.ToUpper()</th>
                                            </tr>
                                        </thead>
                                    </table>
                                }

                                contadorQuebrarPagina++;
                                var quebra = VerificaQuebra();
                                @Html.Raw(quebra);

                                if (componente.PlanejamentoDiario.Count() > 0)
                                {
                                    @Html.Raw(MontarCabecalhoPlanejamento(quebra, componente.Nome))
                                    contadorQuebrarPagina++;
                                }
                                @Html.Raw(MontarDadosTabelaPlanejamento(componente.PlanejamentoDiario, componente.Nome, turma))
                            }
                        }
                    }
                 }
            } 
          }
    </div>
    </div>
</body>
</html>
