@model SME.SR.Infra.RelatorioControlePlanejamentoDiarioDto

@{ int contadorQuebrarPagina = 0;
    int contadorMaximoLinhasPorPagina = 47;
    int contadorPagina = 0;
    var retornoVerificacao = string.Empty;
    var tipoRelatorio = true;

    string VerificaQuebra()
    {
        if (contadorQuebrarPagina >= contadorMaximoLinhasPorPagina)
        {
            contadorQuebrarPagina = 0;
            contadorPagina = contadorPagina + 1;

            var str = MontarCabecalho();
            return $@"<div style='page-break-before:always'/>" + str;

        }
        return string.Empty;

    }

    string MontarCabecalho()
    {
        contadorQuebrarPagina = contadorQuebrarPagina + 9;

        var str = $@"<div class='titulo-sgp'>SGP - SISTEMA DE GESTÃO PEDAGÓGICA</div>
                <div class='titulo-relatorio'>
                    <p style='margin-bottom: 0'>
                        RELATÓRIO DE CONTROLE DE PLANEJAMENTO DIÁRIO
                    </p>
                </div>
                <div class='fonte-14 header-pagina'>
                <table class='tblTopo'>
                    <tbody>
                        <tr>
                            <td  width='40%' class='sem-border-bottom'>DRE: {Model.Filtro.Dre}</td>
                            <td width='40%' class='sem-border-bottom'>UE: {Model.Filtro.Ue}</td>
                            <td  width='20%' class='sem-border-bottom'>TURMA: {Model.Filtro.Turma}</td>
                        </tr>
                    </tbody>
                </table>

                <table>
                    <tbody>
                        <tr>
                            <td width='70%' class='sem-border-bottom'>COMPONENTE CURRICULAR: {Model.Filtro.ComponenteCurricular}</td>
                            <td width='30%' class='sem-border-bottom'>BIMESTRE: {Model.Filtro.Bimestre}</td>
                        </tr>
                    </tbody>
                </table>

                <table>
                    <tbody>
                        <tr>
                            <td width='60%'>USUÁRIO: {Model.Filtro.Usuario}</td>
                            <td width='20%'>RF: {Model.Filtro.RF}</td>
                            <td width='20%'>DATA: {Model.Filtro.Data}</td>
                        </tr>
                    </tbody>
                </table>
              </div>";
        return str;
    }
    string MontarCabecalhoDetalhamento()
    {
        contadorQuebrarPagina += 1;
        var str = "";


        str += $@" <table class='fixed'>
                        <tr>
                            <td class='td-titulo-dois'>PLANEJAMENTO</td>
                        </tr>
                    </table>";

        return str;
    }

    string MontarCabecalhoPlanejamento(string quebra, string turma, string bimestre, string componente)
    {
        contadorQuebrarPagina += 1;
        var str = "";

        if (!string.IsNullOrEmpty(quebra) && turma != "" && (string.IsNullOrEmpty(Model.Filtro.Turma) || Model.Filtro.Turma == "Todas"))
        {
            str += $@"<table class='tabela-planejamento'>
                        <thead>
                          <tr>
                            <th class='sem-border-bottom'>{turma.ToUpper()}</th>
                          </tr>
                        </thead>
                      </table>";
            contadorQuebrarPagina += 1;
        }

        if (!string.IsNullOrEmpty(quebra) && bimestre != "" && (string.IsNullOrEmpty(Model.Filtro.Bimestre) || Model.Filtro.Bimestre == "Todos"))
        {
            str += $@"<table class='tabela-planejamento'>
                        <thead>
                          <tr>
                            <th class='sem-border-bottom'>{bimestre.ToUpper()}</th>
                          </tr>
                        </thead>
                      </table>";
            contadorQuebrarPagina += 1;
        }

        if (!string.IsNullOrEmpty(quebra) && componente != "" && (string.IsNullOrEmpty(Model.Filtro.ComponenteCurricular) || Model.Filtro.ComponenteCurricular == "Todos"))
        {
            str += $@"<table class='tabela-planejamento'>
                        <thead>
                          <tr>
                            <th class='sem-border-bottom'>{componente.ToUpper()}</th>
                          </tr>
                        </thead>
                      </table>";
            contadorQuebrarPagina += 1;
        }

        str += $@" <table class='fixed'>
            <tr>
                <td width='15%' class='td-titulo-dois'>DATA DA AULA</td>                
                <td width='15%' class='td-titulo-dois'>PLANEJAMENTO REALIZADO</td>
                <td width='15%' class='td-titulo-dois'>DATA DO REGISTRO</td>
                <td width='15%' class='td-titulo-dois'>USUÁRIO</td>
                <td width='40%' class='td-titulo-dois'>SEÇÕES PREENCHIDAS</td>
            </tr>
           </table>";

        return str;
    }

    string MontarDadosTabelaPlanejamento(IEnumerable<SME.SR.Infra.PlanejamentoDiarioInfantilDto> planejamentoDiario, string NomeTurma, string NomeBimestre, string NomeComponente, SME.SR.Infra.TurmaPlanejamentoDiarioDto turma)
    {
        var str = "";
        var detalhamento = false;
        var ultimoplanejamento = planejamentoDiario.LastOrDefault();
        str += "<table class='fixed'><tbody>";

        foreach (var planejamento in planejamentoDiario)
        {
            detalhamento = false;
            contadorQuebrarPagina += 1;

            if (planejamento.SecoesPreenchidas.Any())
                contadorQuebrarPagina += 1;

            str += $@"<table class='fixed'>
                        <tbody>
                            <tr>
                                <td width='15%' class='td-valor-dois'>{planejamento.DataAula} / {contadorQuebrarPagina}</td>                
                                <td width='15%' class='td-valor-dois'>{planejamento.PlanejamentoRealizado}</td>
                                <td width='15%' class='td-valor-dois'>{planejamento.DateRegistro}</td>
                                <td width='15%' class='td-valor-dois'>{planejamento.Usuario}</td>
                                <td width='40%' class='td-secoes-preenchidas'>{planejamento.SecoesPreenchidas}</td>
                            </tr>
                        </tbody>
                      </table>";

            if (planejamento.Planejamento != null && planejamento.Planejamento.Any())
            {
                detalhamento = true;
                str += MontarCabecalhoDetalhamento();

                contadorQuebrarPagina += planejamento.Planejamento.Length > 135 ? (int)(planejamento.Planejamento.Length / 135) + 1 : 1;

                str += $@"<table class='fixed'>
                    <tbody>
                        <tr>
                            <td class='td-planejamento'>{planejamento.Planejamento}</td>                            
                        </tr>
                    </tbody>
                  </table>";
            }


            retornoVerificacao = VerificaQuebra();
            if (retornoVerificacao != string.Empty)
            {
                if (ultimoplanejamento.DataAula.Equals(planejamento.DataAula) && ultimoplanejamento.DateRegistro.Equals(planejamento.DateRegistro))
                {
                    str += $@"</tbody></table>{retornoVerificacao}";
                }
                else
                {
                    str += $@"</tbody></table>{retornoVerificacao}{MontarCabecalhoPlanejamento(retornoVerificacao, NomeTurma, NomeBimestre, NomeComponente)}";
                }
            }
            else
            {
                if (!ultimoplanejamento.DataAula.Equals(planejamento.DataAula) && !ultimoplanejamento.DateRegistro.Equals(planejamento.DateRegistro))
                    if (detalhamento)
                        str += LinhaEmBranco();
            }

        }
        return str;
    }
    string LinhaEmBranco()
    {
        contadorQuebrarPagina += 1;
        return "<table><tr><td style='border-top:none;border-bottom:none;'><br/></td></tr></table>";
    }
}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RELATÓRIO DE CONTROLE DE PLANEJAMENTO DIÁRIO</title>
</head>

<body class="body-rel-faltas-frequencia">
    <style>
        .body-rel-faltas-frequencia {
            margin: 0.5cm auto;
            font-family: Roboto, sans-serif;
            width: 21cm;
            min-height: 29.7cm;
            background: white;
            color: #42474a;
        }

        .titulo-sgp {
            text-align: right;
            font-size: 14px;
            font-weight: bold;
        }

        .titulo-relatorio {
            text-align: right;
            font-size: 14.5px;
            margin-top: 7px;
            font-weight: bold;
        }

        .titulo-plano-aula {
            text-align: right;
            font-size: 14.5px;
        }

        .img-logo-sgp {
            height: 64px;
            float: left;
        }

        .header-pagina {
            margin-top: 33px;
            margin-bottom: 22px;
        }

            .header-pagina td {
                text-align: left;
                padding: 4px;
                padding-left: 15px;
            }

        .campo-dre {
            width: 25%;
        }

        .campo-ue {
            width: 60%;
        }

        .campo-ano {
            width: 15%;
        }

        .campo-componente-curricular {
            width: 70%;
            border-top: none;
        }

        .campo-bimestre {
            width: 30%;
            border-top: none;
        }

        .campo-usuario {
            width: 60%;
            border-top: none;
        }

        .campo-rf-data {
            width: 20%;
            border-top: none;
        }

        table {
            display: table;
            width: 100%;
            border-color: #42474a;
            empty-cells: show;
            border: none;
            border-collapse: collapse;
        }

        thead {
            background-color: #f3f3f3;
        }

        th {
            border: 1px solid #42474a;
            font-weight: normal;
        }

        td {
            border: 1px solid #42474a;
        }

        .fonte-16 {
            font-size: 16px !important;
        }

        .fonte-14 {
            font-size: 14px !important;
        }

        .fonte-12 {
            font-size: 12px !important;
        }

        .alinhar-esquerda {
            text-align: left;
        }

        .rodape-rel-faltas-frequencia {
            margin-top: 10px;
            font-size: 9px;
            font-weight: bold;
        }

        .titulo-sgp-rodape {
            float: left;
        }

        .contador-pagina {
            float: right;
            font-size: 15px;
        }

        .thLimpo {
            background-color: #ffffff;
        }

        .tb-head {
            background-color: #f3f3f3;
            text-align: left;
            font-size: 16px;
            padding: 10px;
            padding-left: 20px;
        }

        .td-titulo-um {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 14px;
            padding: 4px;
            border-bottom: none;
        }

        .td-titulo-dois {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 12px;
            padding: 4px;
            border-bottom: none;
        }

        .td-titulo-tres {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 12px;
            padding: 4px;
            border-top: none;
            border-bottom: none;
        }

        .td-valor-dois {
            text-align: center;
            font-size: 12px;
            padding: 2px;
            padding: 4px;
        }

        .td-valor-tres {
            text-align: left;
            font-size: 12px;
            padding: 4px;
            padding-left: 10px;
        }

        .td-valor-quatro {
            text-align: left;
            font-size: 12px;
            padding: 4px;
            padding-left: 10px;
            border-top: none;
            border-bottom: none;
        }

        .td-secoes-preenchidas {
            text-align: left;
            font-size: 12px;
            padding: 2px;
            padding: 4px;
        }

        .td-planejamento {
            text-align: justify;
            font-size: 12px;
            padding: 2px;
            padding: 4px;
        }

        .caixa-1 {
            text-align: justify;
            padding: 20px 15px 20px 15px;
        }

        .caixa-2 {
            padding: 10px 15px 10px 15px;
            text-align: justify;
            border-top: none;
        }

        .h-50 {
            height: 50px;
        }

        .m-30 {
            margin-top: 30px;
        }

        .tabela-objetivos-items-tr {
            height: 50px;
        }

        .tabela-objetivos-items-titulo {
            padding: 20px 15px 20px 15px;
            border-top: none;
            text-align: center;
            font-weight: bold;
            width: 15%;
        }

        .tabela-objetivos-items-descricao {
            border-top: none;
            width: 85%;
            text-align: justify;
            padding: 5px 15px 5px 15px;
            font-size: 14px;
        }

        .tabela-planejamento {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 14px;
            padding: 4px;
            border-bottom: none;
        }

        table.fixed {
            table-layout: fixed;
        }

            table.fixed td {
                overflow: hidden;
            }

        .sem-border-bottom {
            border-bottom: 0;
        }
    </style>
    <div>
        <div>
            <img class="img-logo-sgp" src="logoMono.png" alt="Logo SGP" />
        </div>
        @Html.Raw(MontarCabecalho())
    <div>
        @{
            var bimestreDescricaoAnt = "";
            foreach (var turma in Model.Turmas)
            {
                tipoRelatorio = true;
                @if (turma.Bimestres != null || !turma.Bimestres.Any())
                {
                    bimestreDescricaoAnt = "";

                    foreach (var bimestre in turma.Bimestres)
                    {
                        @if (bimestre.ComponentesCurriculares != null || bimestre.ComponentesCurriculares.Any())
                        {
                            foreach (var componente in bimestre.ComponentesCurriculares)
                            {
                                // TURMA
                                if (Model.Filtro.Turma == "Todas" || Model.Filtro.Turma == "")
                                {
                                    contadorQuebrarPagina = contadorQuebrarPagina + 1;
                                    @Html.Raw(VerificaQuebra())

                                    <table class="tabela-planejamento">
                                        <thead>
                                            <tr>
                                                <th class="sem-border-bottom">@turma.Nome.ToUpper()</th>
                                            </tr>
                                        </thead>
                                    </table>
                                }

                                // BIMESTRE
                                if (!bimestreDescricaoAnt.Equals(bimestre.Nome))
                                {
                                    if (Model.Filtro.Bimestre == "Todos" || Model.Filtro.Bimestre == "")
                                    {
                                        contadorQuebrarPagina = contadorQuebrarPagina + 1;
                                        @Html.Raw(VerificaQuebra())

                                        <table class="tabela-planejamento">
                                            <thead>
                                                <tr>
                                                    <th class="sem-border-bottom">@bimestre.Nome.ToUpper()</th>
                                                </tr>
                                            </thead>
                                        </table>
                                    }
                                    bimestreDescricaoAnt = bimestre.Nome;
                                }

                                // DIÁRIO DE BORDO
                                if (tipoRelatorio)
                                {
                                    tipoRelatorio = false;
                                    contadorQuebrarPagina = contadorQuebrarPagina + 1;
                                    @Html.Raw(VerificaQuebra())

                                    <table class="tabela-planejamento">
                                        <thead>
                                            <tr>
                                                <th class="sem-border-bottom">@Html.Raw("DIÁRIO DE BORDO")</th>
                                            </tr>
                                        </thead>
                                    </table>
                                }

                                // COMPONENTE CURRICULAR
                                if (string.IsNullOrEmpty(Model.Filtro.ComponenteCurricular) || Model.Filtro.ComponenteCurricular == "Todos")
                                {
                                    contadorQuebrarPagina = contadorQuebrarPagina + 1;
                                    @Html.Raw(VerificaQuebra())

                                    <table class="tabela-planejamento">
                                        <thead>
                                            <tr>
                                                <th class="sem-border-bottom">@componente.Nome.ToUpper()</th>
                                            </tr>
                                        </thead>
                                    </table>
                                }

                                contadorQuebrarPagina++;
                                var quebra = VerificaQuebra();
                                @Html.Raw(quebra);

                                if (componente.PlanejamentoDiario.Count() > 0)
                                {
                                    @Html.Raw(MontarCabecalhoPlanejamento(quebra, turma.Nome, bimestre.Nome, componente.Nome))
                                    contadorQuebrarPagina++;
                                }
                                @Html.Raw(MontarDadosTabelaPlanejamento(componente.PlanejamentoDiarioInfantil, turma.Nome, bimestre.Nome, componente.Nome, turma))
                            }
                        }
                    }
                }
            }
        }
    </div>
    </div>
</body>
</html>
