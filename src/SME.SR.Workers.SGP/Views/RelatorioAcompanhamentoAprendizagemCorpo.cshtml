@model SME.SR.Infra.RelatorioAcompanhamentoAprendizagemAlunoDto

@{
    int contadorQuebrarPagina = 0;
    int contadorMaximoLinhasPorPagina = 43;
    int contadorMaximoDescricao = 0;
    bool quebrou = false;
    int contadorMaximoCaracteresPorLinhaPercurso = 236;
    int contadorMaximoCaracteresPorLinhaRegistroIndividual = 185;

    Microsoft.AspNetCore.Html.IHtmlContent MontarQuebrarPagina()
    {
        var str = $@"<div style='page-break-before:always' />";
        return Html.Raw(str);
    }

    string EspacoEmBranco()
    {
        if (quebrou)
        {
            return "";
        }

        return @"<table><tbody><tr><td height='17px' width='100%' class='tabela-cabecalho sem-border-bottom'></td></tr></tbody></table>";
    }

    void SomaLinhasContador(int numeroLinhasDescricao)
    {
        if (numeroLinhasDescricao > 1)
        {
            contadorQuebrarPagina = contadorQuebrarPagina + numeroLinhasDescricao;
        }
        else
        {
            contadorQuebrarPagina++;
        }
    }

    bool VerificaQuebra(int numeroLinhasDescricao = 0)
    {
        if (contadorQuebrarPagina + numeroLinhasDescricao >= contadorMaximoLinhasPorPagina)
        {
            contadorQuebrarPagina = 0;
            contadorQuebrarPagina = contadorQuebrarPagina + 1;
            quebrou = true;
            return true;
        }
        quebrou = false;
        return false;

    }

    int CalcularLinhas(int valorLinha = 0, int caracteres = 240)
    {
        if (contadorMaximoDescricao == 1)
        {
            contadorMaximoDescricao = 0;
        }
        else
        {
            contadorMaximoDescricao++;
        }

        if (valorLinha > 0)
        {
            return valorLinha / caracteres;
        }

        return 1;
    }

    string MontarTitulo(string titulo)
    {
        <table class='tabela-alunos'>
            <thead>
                <tr>
                    <td width='100%' class='centralizar sem-border-bottom negrito'>@titulo</td>
                </tr>
            </thead>
        </table>

        contadorQuebrarPagina++;

        return "";
    }

    void QuebrarLinhas(int numeroQuebras = 2, string estudante = "", string titulo = "")
    {
        bool quebra = VerificaQuebra(numeroQuebras);

        if (quebra)
        {
            @Html.Raw("</tbody></table>");
            @Html.Raw("<div style='page-break-before:always'></div>");

            if (!String.IsNullOrEmpty(estudante))
            {
                @Html.Raw(MontarTitulo(estudante));
            }

            if (!String.IsNullOrEmpty(titulo))
            {
                @Html.Raw(MontarTitulo(titulo));
            }

            @Html.Raw("<table class='tabela-alunos'>");

            contadorQuebrarPagina = contadorQuebrarPagina + numeroQuebras;
        }
    }

    string MontarEstudantes(SME.SR.Infra.RelatorioAcompanhamentoAprendizagemAlunoDto aluno)
    {
        MontarTitulo(aluno.Nome);

        <table class='tabela-alunos'>
            <thead>
                <tr>
                    <td class='centralizar sem-border-bottom negrito'>DATA DE NASCIMENTO</td>
                    <td class='centralizar sem-border-bottom negrito'>CÓDIGO EOL</td>
                    <td class='centralizar sem-border-bottom negrito'>SITUAÇÃO</td>
                    <td class='centralizar sem-border-bottom negrito'>RESPONSÁVEL</td>
                    <td class='centralizar sem-border-bottom negrito'>CONTATO</td>
                </tr>
            </thead>

            @{ contadorQuebrarPagina++; }

            <tbody>
                <tr>
                    <td width="20%" class='centralizar'>@aluno.DataNascimento</td>
                    <td width="14%" class='centralizar'>@aluno.CodigoEol</td>
                    <td width="22%" class='centralizar' style="padding:3px;">@aluno.Situacao</td>
                    <td width="22%" class='centralizar'>@aluno.Responsavel</td>
                    <td width="22%" class='centralizar'>@aluno.Telefone</td>
                </tr>
            </tbody>
        </table>

        return "";
    }

    string MontarFotos(SME.SR.Infra.RelatorioAcompanhamentoAprendizagemAlunoDto aluno)
    {
        MontarTitulo("FOTOS");

        <table class='tabela-alunos sem-border-bottom'>
            <tbody>
                <tr>
                    @{
                        for (int i = 0; i < 3; i++)
                        {
                            @if (aluno.Fotos.ElementAtOrDefault(i) != null)
                            {
                                <td width="33%" class='centralizar'>
                                    <img style="margin:3px; max-width: 257px;" src="@aluno.Fotos[i].Caminho" height="180px" />
                                </td>
                            }
                            else
                            {
                                <td width="33%" class='centralizar'>
                                </td>
                            }
                        }
                    }
                </tr>
            </tbody>
        </table>

        return "";
    }

    string MontarFrequencia(SME.SR.Infra.RelatorioAcompanhamentoAprendizagemAlunoDto aluno)
    {
        MontarTitulo("FREQUÊNCIA");

        <table class='tabela-alunos'>
            <thead>
                <tr>
                    <td class='centralizar sem-border-bottom negrito'>BIMESTRE</td>
                    <td class='centralizar sem-border-bottom negrito'>AULAS</td>
                    <td class='centralizar sem-border-bottom negrito'>AUSÊNCIAS</td>
                    <td class='centralizar sem-border-bottom negrito'>FREQUÊNCIA</td>
                </tr>
            </thead>

            @{ contadorQuebrarPagina++; }

            <tbody>

                @foreach (var frequencia in aluno.Frequencias)
                {
                    <tr>

                        <td width="25%" class='centralizar'>@frequencia.Bimestre</td>
                        <td width="25%" class='centralizar'>@frequencia.Aulas</td>
                        <td width="25%" class='centralizar'>@frequencia.Ausencias</td>
                        <td width="25%" class='centralizar'>@frequencia.Frequencia</td>
                    </tr>

                    contadorQuebrarPagina++;

                    QuebrarLinhas(0, aluno.Nome);
                }

            </tbody>
        </table>

        return "";
    }

    string MontarCabecalhoRegistroIndividual()
    {
        var classeRegistroIndividual = !quebrou ? "sem-border-top" : "";

        <tr>
            <td width="20%" class="fundo-cinza sem-border-bottom negrito {@classeRegistroIndividual}">DATA DO REGISTRO</td>
            <td class="fundo-cinza sem-border-bottom negrito">REGISTRO</td>
        </tr>
        return "";
    }

    void MontarRegistroIndividualNovo(string descricaoRegistroIndividual, string estudante, string dataRegistroIndividual, string titulo)
    {
        var iContadorCaracteres = 0;
        if (!(contadorQuebrarPagina + 1 >= contadorMaximoLinhasPorPagina))
        {
            @Html.Raw($@"<tr><td width='15%' class='centralizar'>{dataRegistroIndividual}</td>")
            @Html.Raw("<td width='85%' class='alinhar-esquerda espaco-esquerda-15'>")
        }

        @while (iContadorCaracteres != descricaoRegistroIndividual.Length)
        {
            if (contadorQuebrarPagina + 1 >= contadorMaximoLinhasPorPagina)
            {
                contadorQuebrarPagina = 0;
                @Html.Raw("</td></tr></tbody></table>")
                @Html.Raw("</tbody></table>");
                @Html.Raw("<div style='page-break-before:always'></div>");

                if (!String.IsNullOrEmpty(estudante))
                {
                    @Html.Raw(MontarTitulo(estudante));
                    @Html.Raw(MontarTitulo(titulo))
                    @Html.Raw("<table class='tabela-alunos'><tbody>")
                    @Html.Raw(MontarCabecalhoRegistroIndividual())
                    contadorQuebrarPagina++;
                    @Html.Raw($@"<tr><td width='15%' class='centralizar'>{dataRegistroIndividual}</td>")
                    @Html.Raw("<td width='85%' class='alinhar-esquerda espaco-esquerda-15'>")
                }
            }
            else
            {
                var qntCaracteresParaBuscar = descricaoRegistroIndividual.Length - iContadorCaracteres < contadorMaximoCaracteresPorLinhaRegistroIndividual ? descricaoRegistroIndividual.Length - iContadorCaracteres : contadorMaximoCaracteresPorLinhaRegistroIndividual;
                var textParaExibir = descricaoRegistroIndividual.Substring(iContadorCaracteres, qntCaracteresParaBuscar);
                iContadorCaracteres += textParaExibir.Length;

                @Html.Raw(textParaExibir)

                contadorQuebrarPagina++;
            }
        }

        @Html.Raw("</td></tr>")
    }

    void MontarRegistroIndividual(SME.SR.Infra.RelatorioAcompanhamentoAprendizagemAlunoDto aluno)
    {
        var titulo = "REGISTRO INDIVIDUAL";
        int contarRegistroIndividual = 0;

        @foreach (var registroIndividual in aluno.RegistrosIndividuais)
        {
            var descricaoRegistroIndividual = registroIndividual.Descricao;
            var dataRegistroIndividual = registroIndividual.Data;

            if (contarRegistroIndividual == 0 && contadorQuebrarPagina < contadorMaximoLinhasPorPagina)
            {
                @Html.Raw(MontarTitulo(titulo))
                @Html.Raw("<table class='tabela-alunos'><tbody>")
                @Html.Raw(MontarCabecalhoRegistroIndividual())
                contadorQuebrarPagina++;
            }

            MontarRegistroIndividualNovo(descricaoRegistroIndividual, aluno.Nome, dataRegistroIndividual, titulo);

            contarRegistroIndividual++;
        }

        @Html.Raw("</tbody></table>")
    }

    string MontarObservacoes(string observacao)
    {
        <table class='tabela-alunos sem-border-top'>
            <thead>
                <tr>
                    <td width='100%' class='centralizar negrito'>OBSERVAÇÕES</td>
                </tr>
            </thead>

            @{ contadorQuebrarPagina++; }

            <tbody>
                <tr>
                    <td class="alinhar-esquerda espaco-esquerda-15">
                        @observacao
                    </td>
                </tr>
            </tbody>
        </table>

        return "";
    }

    string MontarSubTituloOcorrencias()
    {
        <thead>
            <tr>
                <th class="centralizar sem-border-bottom negrito">DATA DO OCORRÊNCIA</th>
                <th class="centralizar sem-border-bottom negrito">TIPO</th>
                <th class="centralizar sem-border-bottom negrito">DESCRIÇÃO DA OCORRÊNCIA</th>
            </tr>
        </thead>
        return "";
    }

    string MontarOcorrencias(SME.SR.Infra.RelatorioAcompanhamentoAprendizagemAlunoDto aluno)
    {
        var tituloOcorrencias = "OCORRÊNCIAS";

        MontarTitulo(tituloOcorrencias);

        <table class='tabela-alunos'>
            @Html.Raw(MontarSubTituloOcorrencias())

            @{ contadorQuebrarPagina++; }

            <tbody>

                @foreach (var ocorrencia in aluno.Ocorrencias)
                {
                    var descricaoOcorrencia = ocorrencia.Descricao;
                    int numeroLinhasOcorrencia = CalcularLinhas(descricaoOcorrencia.Length);

                    QuebrarLinhas(numeroLinhasOcorrencia + 2, aluno.Nome, tituloOcorrencias);

                    if (!quebrou)
                    {
                        SomaLinhasContador(numeroLinhasOcorrencia);
                    }
                    else
                    {
                        @Html.Raw(MontarSubTituloOcorrencias())
                        contadorQuebrarPagina++;
                    }

                    <tr>
                        <td rowspan="2" width="15%">@ocorrencia.Data</td>
                        <td rowspan="2" width="15%">@ocorrencia.Tipo</td>
                        <td class="alinhar-esquerda espaco-esquerda-15">@ocorrencia.Titulo</td>
                    </tr>

                    contadorQuebrarPagina++;

                    <tr>
                        <td class="alinhar-esquerda espaco-esquerda-15">@descricaoOcorrencia</td>
                    </tr>
                }
            </tbody>
        </table>

        return "";
    }

    string MontarAssinatura()
    {
        MontarTitulo("ESTOU CIENTE DESTE RELATÓRIO");

        <table class='tabela-alunos'>
            <thead>
                <tr>
                    <td class='centralizar sem-border-bottom negrito'>DATA ASSINATURA</td>
                    <td class='centralizar sem-border-bottom negrito'>ASSINATURA</td>
                </tr>
            </thead>

            @{ contadorQuebrarPagina++; }

            <tbody>
                <tr>
                    <td width="20%" class='centralizar'></td>
                    <td width="80%" class='centralizar'></td>
                </tr>
            </tbody>
        </table>

        return "";
    }

    string MontarImagensAnexas(SME.SR.Infra.RelatorioAcompanhamentoAprendizagemAlunoDto aluno, int minimoImpressaoFotos, int maximoImpressaoFotos, bool imprimirTitulo)
    {
        if (imprimirTitulo)
        {
            MontarTitulo("IMAGENS ANEXAS");
        }

        <table class='tabela-alunos sem-border-bottom'>
            <tbody>
                <tr>
                    @for (int i = minimoImpressaoFotos; i < maximoImpressaoFotos; i++)
                    {
                        @if (aluno.PercursoTurmaImagens.ElementAtOrDefault(i) != null)
                        {
                            <td width="33%" class='centralizar'>
                                <img style="margin:3px; max-width: 257px;" src="@aluno.PercursoTurmaImagens[i].Imagem" height="180px" />
                            </td>
                        }
                        else
                        {
                            <td width="33%" class='centralizar'>
                            </td>
                        }
                    }
                </tr>
                <tr>
                    @for (int i = minimoImpressaoFotos; i < maximoImpressaoFotos; i++)
                    {
                        @if (aluno.PercursoTurmaImagens.ElementAtOrDefault(i) != null)
                        {
                            <td width="33%" class='centralizar'>
                                @aluno.PercursoTurmaImagens[i].NomeImagem
                            </td>
                        }
                        else
                        {
                            <td width="33%" class='centralizar'>
                            </td>
                        }
                    }
                </tr>
            </tbody>
        </table>

        return "";
    }

    string MontarRegistroPercursoCabecalho()
    {
        return $@"<table class='tabela-alunos sem-border-top'>
<thead>
<tr>
<td width='100%' class='centralizar negrito'>REGISTRO DO PERCURSO DA TURMA</td>
</tr>
</thead>
<tbody>
<tr>
<td class='alinhar-esquerda espaco-esquerda-15 espaco-esquerda-15'>";
    }

    string MontarRegistroPercursoRodape()
    {
        return @"             </td>
</tr>
</tbody>
</table>";
    }

    void MontarRegistroPercursoNovo(string registroPercursoTurma, string estudante)
    {
        @Html.Raw(MontarRegistroPercursoCabecalho());
        contadorQuebrarPagina++;
        var iContadorCaracteres = 0;

        @while (iContadorCaracteres != registroPercursoTurma.Length)
        {
            if (contadorQuebrarPagina + 1 >= contadorMaximoLinhasPorPagina)
            {
                contadorQuebrarPagina = 0;
                @Html.Raw(MontarRegistroPercursoRodape());
                @Html.Raw("</tbody></table>");
                @Html.Raw("<div style='page-break-before:always'></div>");                

                if (!String.IsNullOrEmpty(estudante))
                {
                    @Html.Raw(MontarTitulo(estudante));
                }

                @Html.Raw(MontarRegistroPercursoCabecalho());
            }
            else
            {
                var qntCaracteresParaBuscar = registroPercursoTurma.Length - iContadorCaracteres < contadorMaximoCaracteresPorLinhaPercurso ? registroPercursoTurma.Length - iContadorCaracteres : contadorMaximoCaracteresPorLinhaPercurso;
                var textParaExibir = registroPercursoTurma.Substring(iContadorCaracteres, qntCaracteresParaBuscar);
                iContadorCaracteres += textParaExibir.Length;
                <span>@Html.Raw(textParaExibir)</span>                
                contadorQuebrarPagina++;
            }

        }

        @Html.Raw(MontarRegistroPercursoRodape());

    }

    MontarEstudantes(Model);
    contadorQuebrarPagina++;

    if (Model.Fotos.Any())
    {
        @Html.Raw(EspacoEmBranco())
        contadorQuebrarPagina++;

        MontarFotos(Model);

        contadorQuebrarPagina = contadorQuebrarPagina + 10;
    }

    var registroPercursoTurma = Model.RegistroPercursoTurma;
    if (!String.IsNullOrEmpty(registroPercursoTurma))
    {
        MontarRegistroPercursoNovo(registroPercursoTurma, Model.Nome);
    }

    @if (Model.PercursoTurmaImagens.Any())
    {
        int numeroMaximoFotos = 3;
        int maximoFotos = Model.PercursoTurmaImagens.Count;
        int minimoImpressaoFotos = 0;
        int maximoImpressaoFotos = 3;
        int numeroLinhas = maximoFotos / numeroMaximoFotos;
        int restoLinhas = maximoFotos / numeroMaximoFotos;
        int pararImpressao = 1;

        if (maximoFotos > 3 && restoLinhas != 0)
        {
            pararImpressao = numeroLinhas + 1;
        }

        int contarImpressao = 0;
        while (contarImpressao < pararImpressao)
        {
            QuebrarLinhas(11, Model.Nome);
            bool imprimirTitulo = true;

            if (!quebrou)
            {
                contadorQuebrarPagina = contadorQuebrarPagina + 11;
                if (contarImpressao != 0)
                    imprimirTitulo = false;
            }


            if (maximoFotos > 3 && restoLinhas != 0 && contarImpressao != 0)
            {
                minimoImpressaoFotos = 3 * numeroLinhas;
                maximoImpressaoFotos = 6 + (3 * (numeroLinhas - 1));
            }

            MontarImagensAnexas(Model, minimoImpressaoFotos, maximoImpressaoFotos, imprimirTitulo);

            contarImpressao++;
        }
    }

    if (Model.Frequencias.Count() > 0)
    {
        QuebrarLinhas(4, Model.Nome);

        if (!quebrou)
        {
            @Html.Raw(EspacoEmBranco())
            contadorQuebrarPagina++;
        }

        MontarFrequencia(Model);
    }

    if (Model.RegistrosIndividuais.Count() > 0)
    {
        MontarRegistroIndividual(Model);
    }

    var descricaoObservacoes = Model.Observacoes;
    if (!String.IsNullOrEmpty(descricaoObservacoes))
    {
        int numeroLinhasObservacoes = CalcularLinhas(descricaoObservacoes.Length);

        QuebrarLinhas(numeroLinhasObservacoes + 2, Model.Nome);
        @Html.Raw(EspacoEmBranco())
        contadorQuebrarPagina++;

        MontarObservacoes(Model.Observacoes);
        SomaLinhasContador(numeroLinhasObservacoes);
    }

    QuebrarLinhas(5, Model.Nome);

    @Html.Raw(EspacoEmBranco())
    contadorQuebrarPagina++;

    if (Model.Ocorrencias.Count() > 0)
    {
        MontarOcorrencias(Model);
    }

    QuebrarLinhas(3, Model.Nome);
    MontarAssinatura();

    MontarQuebrarPagina();
}