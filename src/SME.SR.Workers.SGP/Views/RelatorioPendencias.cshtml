@model SME.SR.Infra.RelatorioPendenciasDto
@{
    int contadorQuebrarPagina = 0;
    int contadorMaximoLinhasPorPagina = 48;
    int contadorPagina = 0;
    bool quebrou = false;
    int contarNumeroLinhas = 0;
    int contadorMaximoCaracteresPorLinha = 120;

    string VerificaQuebra(int linhas, string nomeBimestre, string nomeComponente)
    {
        if (contadorQuebrarPagina + linhas >= contadorMaximoLinhasPorPagina)
        {
            contadorQuebrarPagina = 0;
            contadorPagina = contadorPagina + 1;

            <div style='page-break-before:always' />

            MontarCabecalho();

            MontarTitulos(nomeBimestre, nomeComponente);

            quebrou = true;
            return string.Empty;
        }

        quebrou = false;
        return string.Empty;
    }

    void MontarLinhaPendenciaSemAprovacao(SME.SR.Infra.RelatorioPendenciasPendenciaDto pendencias)
    {
        <table class="tabela-alunos estilo-texto">
            <thead>

            <th style="width: 20%;">TIPO DE PENDÊNCIA</th>
            <th style="width: 20%;">SITUAÇÃO</th>
            <th style="width: 60%;">USUÁRIO</th>
            </thead>

            @{ contadorQuebrarPagina++;}

            <tbody>
                <tr>
                    <td>@pendencias.TipoPendencia</td>
                    <td>@pendencias.Situacao</td>
                    <td>@pendencias.NomeUsuario</td>
                </tr>
            </tbody>
        </table>
    }

    void MontarLinhaPendenciaComAprovacao(SME.SR.Infra.RelatorioPendenciasPendenciaDto pendencias)
    {
        <table class="tabela-alunos estilo-texto">
            <thead>
            <th style="width: 20%;">TIPO DE PENDÊNCIA</th>
            <th style="width: 20%;">SITUAÇÃO</th>
            <th style="width: 30%;">USUÁRIO</th>
            <th style="width: 30%;">APROVAÇÃO</th>
            </thead>

            @{ contadorQuebrarPagina++;}

            <tbody>
                <tr>
                    <td>@pendencias.TipoPendencia</td>
                    <td>@pendencias.Situacao</td>
                    <td>@pendencias.NomeUsuario</td>
                    <td>@pendencias.NomeUsuarioAprovacao</td>
                </tr>
            </tbody>
        </table>
    }

    void MontarCabecalhoDetalhamento()
    {
        <thead>
            <th style="width: 40%;">DESCRIÇÃO DA PENDÊNCIA</th>
            <th style="width: 60%;">DETALHAMENTO</th>
        </thead>
    }

    void MontarDetalhamentoRodape()
    {
        @Html.Raw("</td></tr></tbody></table>")
    }

    void MontarLinhaDetalhamento(string descricaoPendencia)
    {
        @Html.Raw("<tbody><tr><td>");
        @Html.Raw(descricaoPendencia)
        @Html.Raw("</td><td>");
    }

    void MontarParteDetalhamento(string descricaoPendencia)
    {
        @Html.Raw("<table class='tabela-alunos estilo-texto'>");
        MontarCabecalhoDetalhamento();
        contadorQuebrarPagina++;
        MontarLinhaDetalhamento(descricaoPendencia);
    }

    void MontarDetalhamentoPendencia(string descricaoPendencia, string detalhamentoPendencia, string nomeBimestre, string nomeComponente)
    {
        var iContadorCaracteres = 0;
        var numeroCaracteresDetalhamentoPendencias = detalhamentoPendencia.Length;
        
        @while (iContadorCaracteres != numeroCaracteresDetalhamentoPendencias)
        {
            bool quebrarPagina = contadorQuebrarPagina + 1 >= contadorMaximoLinhasPorPagina;
            if (quebrarPagina)
            {
                contadorQuebrarPagina = 0;
                MontarDetalhamentoRodape();
                @Html.Raw("<div style='page-break-before:always'></div>");
                MontarCabecalho();
                MontarTitulos(nomeBimestre, nomeComponente);
                MontarParteDetalhamento(descricaoPendencia);
                quebrou = true;
            }
            else
            {
                if (iContadorCaracteres == 0 && !quebrou)
                {
                    MontarParteDetalhamento(descricaoPendencia);
                    quebrou = false;
                }

                var qntCaracteresParaBuscar = numeroCaracteresDetalhamentoPendencias - iContadorCaracteres < contadorMaximoCaracteresPorLinha ? numeroCaracteresDetalhamentoPendencias - iContadorCaracteres : contadorMaximoCaracteresPorLinha;
                var textParaExibir = detalhamentoPendencia.Substring(iContadorCaracteres, qntCaracteresParaBuscar);
                iContadorCaracteres += textParaExibir.Length;
                quebrou = true;

                @Html.Raw(textParaExibir)
                contadorQuebrarPagina++;
            }
        }

        MontarDetalhamentoRodape();        
    }

    void MontarLinhaPendencia(SME.SR.Infra.RelatorioPendenciasPendenciaDto pendencias, int contadorPendencias, int quantidadePendencias, string nomeBimestre, string nomeComponente)
    {
        @if (contadorPendencias != 0 && !quebrou && contadorQuebrarPagina + 1 < contadorMaximoLinhasPorPagina)
        {
            <table class="tabela-alunos estilo-texto">
                <tr style="height: 5px;">
                    <td colspan="4" class="thLimpo" style="border-top: 0; border-bottom: 0;"></td>
                </tr>
            </table>
         }

        MontarDetalhamentoPendencia(pendencias.DescricaoPendencia, pendencias.DetalhamentoPendencia, nomeBimestre, nomeComponente);

        VerificaQuebra(2, nomeBimestre, nomeComponente);

        if (pendencias.ExibirAprovacao)
        {
            MontarLinhaPendenciaComAprovacao(pendencias);
        }
        else
        {
            MontarLinhaPendenciaSemAprovacao(pendencias);
        }

        quebrou = false;
        contadorQuebrarPagina++;
    }

    void MontarCabecalho()
    {
        contadorQuebrarPagina = contadorQuebrarPagina + 9;
        <div>
            <img class='img-logo-sgp' src='logoMono.png' alt='Logo SGP' />
        </div>
        <div class='titulo-sgp'>SGP - SISTEMA DE GESTÃO PEDAGÓGICA</div>
        <div class='titulo-faltas-frequencia'>RELATÓRIO DE PENDÊNCIAS</div>
        <div class='fonte-14 header-pagina'>
            <table class='tblTopo'>
                <tbody>
                    <tr>
                        <td width='20%'>DRE: @Model.DreNome</td>
                        <td width='60%'>UE: @Model.UeNome</td>
                        <td width='20%'>ANO LETIVO: @Model.Ano</td>
                    </tr>
                </tbody>
            </table>
            <table>
                <tbody>
                    <tr>
                        <td class='campo-bimestre'>MODALIDADE: @Model.Modalidade</td>
                        <td class='campo-bimestre'>SEMESTRE: @Model.Semestre</td>
                        <td class='campo-bimestre'>TURMA: @Model.TurmaNome</td>
                    </tr>
                </tbody>
            </table>
            <table>
                <tbody>
                    <tr>
                        <td class='campo-componente-curricular'>
                            COMPONENTE CURRICULAR: @Model.ComponenteCurricular
                        </td>
                        <td class='campo-bimestre'>BIMESTRE: @Model.Bimestre</td>
                    </tr>
                </tbody>
            </table>
            <table>
                <tbody>
                    <tr>
                        <td class='campo-usuario'>USUÁRIO: @Model.UsuarioLogadoNome</td>
                        <td class='campo-rf-data'>RF: @Model.UsuarioLogadoRf</td>
                        <td class='campo-rf-data'>DATA: @Model.Data</td>
                    </tr>
                </tbody>
            </table>
        </div>
    }

    void MontarLinhaTabela(string nome, bool ehEspacoVazio = false)
    {
        var classeEspacoVazio = ehEspacoVazio ? "thLimpo" : "";
        <table class="tabela-alunos">
            <thead>
                <tr>
                    <th class="@classeEspacoVazio">@nome</th>
                </tr>
            </thead>
        </table>
    }

    void MontarTitulos(string nomeBimestre, string nomeComponente)
    {
        if (Model.Bimestre == "Todos" && !String.IsNullOrEmpty(nomeBimestre))
        {
            MontarLinhaTabela(nomeBimestre);
            contadorQuebrarPagina++;
            contarNumeroLinhas++;
            quebrou = false;
        }

        if (Model.ComponenteCurricular == "Todos" && !String.IsNullOrEmpty(nomeComponente))
        {
            MontarLinhaTabela(nomeComponente);
            contadorQuebrarPagina++;
            contarNumeroLinhas++;
            quebrou = false;
        }
    }
}

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Relatório de Pendências</title>
</head>
<body class="body-rel-faltas-frequencia">
    <style>
        tblTopo th, td {
            padding: 3px 0px 3px 15px;
            text-align: left;
        }

        .body-rel-faltas-frequencia {
            margin: 0.5cm auto;
            font-family: Roboto, sans-serif;
            width: 21cm;
            min-height: 29.7cm;
            background: white;
            color: #42474a;
        }

        .titulo-sgp {
            text-align: right;
            font-size: 14px;
            font-weight: bold;
        }

        .titulo-faltas-frequencia {
            text-align: right;
            font-size: 14.5px;
            margin-top: 7px;
        }

        .img-logo-sgp {
            height: 64px;
            float: left;
        }

        .header-pagina {
            margin-top: 33px;
            margin-bottom: 22px;
        }

            .header-pagina td {
                text-align: left;
            }

        .campo-dre {
            width: 25%;
        }

        .campo-ue {
            width: 60%
        }

        .campo-ano {
            width: 15%
        }

        .campo-bimestre {
            width: 20%;
            border-top: none;
        }

        .campo-componente-curricular {
            width: 80%;
            border-top: none;
        }

        .campo-usuario {
            width: 60%;
            border-top: none;
        }

        .campo-rf-data {
            width: 20%;
            border-top: none;
        }

        table {
            display: table;
            width: 100%;
            border-color: #42474a;
            empty-cells: show;
            border: none;
            border-collapse: collapse;
        }

        thead {
            background-color: #f3f3f3;
        }

        th {
            border: 1px solid #42474a;
            font-weight: normal;
        }

        td {
            border: 1px solid #42474a;
            text-align: center;
        }

        .tabela-alunos tr {
            font-size: 12px;
            height: 24px;
        }

        .mt-25 {
            margin-top: 25px;
        }

        .fonte-14 {
            font-size: 14px !important;
        }

        .alinhar-esquerda {
            text-align: left;
        }

        .rodape-rel-faltas-frequencia {
            margin-top: 10px;
            font-size: 9px;
            font-weight: bold;
        }

        .titulo-sgp-rodape {
            float: left;
        }

        .contador-pagina {
            float: right;
            font-size: 15px;
        }

        .thLimpo {
            background-color: #ffffff;
        }

        .estilo-texto td, .estilo-texto th {
            text-align: left;
            padding: 3px 16px
        }
    </style>
    <div>
        @{
            MontarCabecalho();

            int numeroMaximoTurmas = Model.Dre.Ue.Turmas.Count;
            for (int contadorTurmas = 0; contadorTurmas < numeroMaximoTurmas; contadorTurmas++)
            {
                @if (Model.Dre.Ue.Turmas[contadorTurmas].Bimestres != null)
                {
                    int contadorBimestres = 0;
                    int numeroMaximoBimestres = Model.Dre.Ue.Turmas[contadorTurmas].Bimestres.Count;
                    foreach (var bimestre in Model.Dre.Ue.Turmas[contadorTurmas].Bimestres)
                    {
                        @if (bimestre.Componentes != null)
                        {
                            if (Model.TurmaNome == "Todas")
                            {
                                var turma = Model.Dre.Ue.Turmas[contadorTurmas];
                                MontarLinhaTabela(turma.Nome);
                                contadorQuebrarPagina++;
                                contarNumeroLinhas++;
                            }

                            int numeroMaximoComponentes = bimestre.Componentes.Count;
                            quebrou = false;
                            for (int contadorComponentes = 0; contadorComponentes < numeroMaximoComponentes; contadorComponentes++)
                            {
                                var componente = bimestre.Componentes[contadorComponentes];
                                var nomeBimestre = bimestre.Nome;
                                var nomeComponente = componente.NomeComponente;

                                if (contadorComponentes != 0 && !quebrou)
                                {
                                    MontarLinhaTabela(String.Empty, true);
                                    contadorQuebrarPagina++;
                                    contarNumeroLinhas++;
                                }

                                MontarTitulos(nomeBimestre, nomeComponente);

                                if (componente.Pendencias != null)
                                {
                                    for (int contadorPendencias = 0; contadorPendencias < componente.Pendencias.Count; contadorPendencias++)
                                    {
                                        var pendencias = componente.Pendencias[contadorPendencias];
                                        var quantidadeMaximaPendencias = componente.Pendencias.Count;
                                        MontarLinhaPendencia(pendencias, contadorPendencias, quantidadeMaximaPendencias, nomeBimestre, nomeComponente);
                                    }
                                }

                                if (contadorComponentes < numeroMaximoComponentes - 1 || contadorBimestres < numeroMaximoBimestres - 1 || contadorTurmas < numeroMaximoTurmas - 1)
                                {
                                    VerificaQuebra(contarNumeroLinhas, String.Empty, String.Empty);
                                    contarNumeroLinhas = 0;
                                }
                            }
                        }

                        contadorBimestres++;
                    }
                }
            }
        }

    </div>
</body>
</html>