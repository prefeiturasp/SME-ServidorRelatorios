@model SME.SR.Infra.ControleGradeDto

@{
        int contadorQuebrarPagina = 0;
        int contadorMaximoLinhasPorPagina = 47;
        int contadorPagina = 0;

        string VerificaQuebra()
        {
            if (contadorQuebrarPagina >= contadorMaximoLinhasPorPagina)
            {
                contadorQuebrarPagina = 0;

                var str = MontarCabecalho();
                return $@"<div style='page-break-before:always' />" + str;

            }
            return string.Empty;
        }

        string MontarCabecalho()
        {
            var ueLen = Model.Filtro.Ue.Length > 41 ? (int)(Model.Filtro.Ue.Length / 41) : 1;
            var professorLen = Model.Filtro.Usuario.Length > 30 ? (int)(Model.Filtro.Usuario.Length / 30) : 1;
            contadorQuebrarPagina = contadorQuebrarPagina + ueLen + professorLen + 5;
        var str =
           $@"<div>
<img class='img-logo-sgp' src='logoMono.png' alt='Logo SGP' />
</div>
<div class='titulo-sgp'>SGP - SISTEMA DE GESTÃO PEDAGÓGICA</div>
<div class='titulo-plano-aula'>
<p style='margin-bottom: 0'>RELATÓRIO CONTROLE DE GRADE - ANALÍTICO</p>
</div>
<div class='fonte-14 header-pagina'>
<table class='tblTopo'>
<tbody>
<tr>
<td width='20%'>DRE: {Model.Filtro.Dre}</td>
<td width='60%'>UE: {Model.Filtro.Ue}</td>
<td width='15%'>TURMA: {Model.Filtro.Turma}</td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td class='campo-componente-curricular'>
COMPONENTE CURRICULAR: {Model.Filtro.ComponenteCurricular}
</td>
<td class='campo-bimestre'>BIMESTRE: {Model.Filtro.Bimestre}</td>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td class='campo-usuario'>PROFESSOR: {Model.Filtro.Usuario}</td>
<td class='campo-rf-data'>RF: {Model.Filtro.RF}</td>
<td class='campo-rf-data'>DATA: {Model.Filtro.Data:dd/MM/yyyy}</td>
</tr>
</tbody>
</table>
</div>";

        return str;

    }

    string MontaBimestre(string descricao)
    {
        return $@"<table class='fixed'>
    <tr>
        <td width='100%' class='td-turma-bimestre'>{descricao}</td>
    </tr>
</table>";
    }

    string MontaCabecalhoTurmaOuBimestre(string nome)
    {
        return $@"<table class='fixed'>
    <tr>
        <td width='100%' class='td-turma-bimestre'>{nome}</td>
    </tr>
    </table>";
    }

    string MontarCorpo()
    {
        var str = "";
        var retornoVerificacao = string.Empty;

        var ultimaTurma = Model.Turmas.Any() ? Model.Turmas.Last() : null;

        foreach (var turma in Model.Turmas)
        {
            if (Model.Turmas.Count() > 1)
            {
                str += MontaCabecalhoTurmaOuBimestre(turma.Nome);
                contadorQuebrarPagina += 1;
            }

            var ultimoBimestre = $"{turma.Nome} - {turma.Bimestres.Last().Descricao}";
            foreach (var bimestre in turma.Bimestres)
            {
                str += MontaBimestre(bimestre.Descricao);
                contadorQuebrarPagina += 1;
                var ultimoComponente = $"{turma.Nome} - {turma.Bimestres.Last().Descricao} - {bimestre.ComponentesCurriculares.Last().Nome}";
                foreach (var componente in bimestre.ComponentesCurriculares)
                {
                    str += MontaCabecalhoTurmaOuBimestre(componente.Nome);
                    str += $@"<table class='fixed' style='margin-bottom:22px;'>
                        <tr>
                            <td width='13%' class='td-titulo'>PREVISTAS</td>
                            <td width='22%' colspan='2' class='td-titulo'>CRIADAS</td>
                            <td width='22%' colspan='2' class='td-titulo'>DADAS</td>
                            <td width='14%' class='td-titulo'>REPOSTAS</td>
                            <td width='15%' class='td-titulo'>DIVERGÊNCIAS</td>
                        </tr>
                        <tr>
                            <td width='12%' class='td-titulo-2'></td>
                            <td width='12.5%' class='td-titulo-2'>PROF. TIT.</td>
                            <td width='12.5%' class='td-titulo-2'>PROF. SUBST.</td>
                            <td width='12.5%' class='td-titulo-2'>PROF. TIT.</td>
                            <td width='12.5%' class='td-titulo-2'>PROF. SUBST.</td>
                            <td width='12.5%' class='td-titulo-2'></td>
                            <td width='12.5%' class='td-titulo-2'></td>
                        </tr>";
                    contadorQuebrarPagina = contadorQuebrarPagina + 3;
                    str += $@"<tr>
                        <td width='12.5%' class='td-valor'>{componente.AulasPrevistas}</td>
                        <td width='12.5%' class='td-valor'>{componente.AulasCriadasProfessorTitular}</td>
                        <td width='12.5%' class='td-valor'>{componente.AulasCriadasProfessorSubstituto}</td>
                        <td width='12.5%' class='td-valor'>{componente.AulasDadasProfessorTitular}</td>
                        <td width='12.5%' class='td-valor'>{componente.AulasDadasProfessorSubstituto}</td>
                        <td width='12.5%' class='td-valor'>{componente.Repostas}</td>
                        <td width='12.5%' class='td-valor'>{componente.Divergencias}</td>
                        </tr></table>
                        ";
                    contadorQuebrarPagina = contadorQuebrarPagina + 2;

                    retornoVerificacao = VerificaQuebra();
                    if (retornoVerificacao != string.Empty)
                    {
                        str = str + $@"{retornoVerificacao}";
                    }

                    if (componente.DetalhamentoDivergencias != null)
                    {
                        if (componente.DetalhamentoDivergencias.AulasNormaisExcedido.Any())
                        {
                            str += MontaDivergenciasAulasExcedidas(componente.DetalhamentoDivergencias.AulasNormaisExcedido,
                                componente.DetalhamentoDivergencias.AulasTitularCJ.Any() ||
                                componente.DetalhamentoDivergencias.AulasDuplicadas.Any() ||
                                componente.DetalhamentoDivergencias.AulasDiasNaoLetivos.Any() ||
                                componente.VisaoSemanal.Any());
                        }

                        if (componente.DetalhamentoDivergencias.AulasTitularCJ.Any())
                        {
                            str += MontaDivergenciasDiasAulasTitularCJ(componente.DetalhamentoDivergencias.AulasTitularCJ,
                                componente.DetalhamentoDivergencias.AulasDuplicadas.Any() ||
                                componente.DetalhamentoDivergencias.AulasDiasNaoLetivos.Any() ||
                                componente.VisaoSemanal.Any());
                        }

                        if (componente.DetalhamentoDivergencias.AulasDuplicadas.Any())
                        {
                            str += MontaDivergenciasAulasDuplicadas(componente.DetalhamentoDivergencias.AulasDuplicadas,
                                componente.DetalhamentoDivergencias.AulasDiasNaoLetivos.Any() ||
                                componente.VisaoSemanal.Any());
                        }

                        if (componente.DetalhamentoDivergencias.AulasDiasNaoLetivos.Any())
                        {
                            str += MontaDivergenciasAulasDiasNaoLetivos(componente.DetalhamentoDivergencias.AulasDiasNaoLetivos,
                                componente.VisaoSemanal.Any());
                        }

                        if (componente.VisaoSemanal.Any())
                        {
                            str += MontaDivergenciasAulasCriadasXPPrevistas(componente.VisaoSemanal);
                        }
                    }
                }
            }
        }
        return str;
    }

    string LinhaEmBranco()
    {
        contadorQuebrarPagina += 1;
        return "<table><tr><td style='border-top:none;border-bottom:none'><br/></td></tr></table>";
    }

    string MontaCabecalhoDivergenciasAulasExcedidas()
    {
        contadorQuebrarPagina += 3;
        return $@"<table class='fixed'>
              <tr>
                <td width='100%' class='td-turma-bimestre'>
                  NÚMERO DE AULAS NORMAIS POR DIA EXCEDIDO
                </td>
              </tr>
            </table>
            <table class='fixed'>
              <tr>
                <td width='25%' class='td-titulo'>DATA</td>
                <td width='25%' class='td-titulo'>QUANTIDADE DE AULAS</td>
                <td width='50%' class='td-titulo'>PROFESSOR</td>
              </tr>";
    }

    string MontaDivergenciasAulasExcedidas(IEnumerable<SME.SR.Infra.AulaNormalExcedidoControleGradeDto> aulas, bool existeProximoNivel = false)
    {
        var retornoVerificacao = string.Empty;
        var str = MontaCabecalhoDivergenciasAulasExcedidas();

        var ultimaAula = aulas.LastOrDefault();
        foreach (var aula in aulas)
        {
            str += $@"<tr>
                <td width='25%' class='td-valor'>{aula.Data}</td>
                <td width='25%' class='td-valor'>{aula.QuantidadeAulas}</td>
                <td width='50%' class='td-valor'>{aula.Professor} ({aula.ProfessorRf})</td>
              </tr>";
            contadorQuebrarPagina += 1;
            retornoVerificacao = VerificaQuebra();
            if (retornoVerificacao != string.Empty)
            {
                str = str + $@"</table>{retornoVerificacao}{MontaCabecalhoDivergenciasAulasExcedidas()}";
            }
        }

        str += $@"</table>";
        if(existeProximoNivel)
        {
            str += LinhaEmBranco();
            contadorQuebrarPagina += 1;
            retornoVerificacao = VerificaQuebra();
            if (retornoVerificacao != string.Empty)
            {
                str += retornoVerificacao;
            }
        }

        return str;
    }

    string MontaCabecalhoDivergenciasDiasAulasTitularCJ()
    {
        contadorQuebrarPagina += 1;
        return $@"<table class='fixed'>
          <tr>
            <td width='100%' class='td-turma-bimestre'>
              DIAS COM AULAS DE TITULAR E CJ
            </td>
          </tr>
        </table>";
    }

    string MontaCabecalhoDivergenciasDiasAulasTitularCJSomenteData(string data)
    {
        contadorQuebrarPagina += 2;
        return $@"
        <table class='fixed'>
          <tr>
            <td width='100%' class='td-titulo'>
              {data}
            </td>
          </tr>
        </table>
        <table class='fixed'>
        <tr>
            <td width='20%' class='td-titulo'>QUANTIDADE DE AULAS</td>
            <td width='30%' class='td-titulo'>PROFESSOR TITULAR</td>
            <td width='30%' class='td-titulo'>PROFESSOR CJ</td>
          </tr>";
    }

    string MontaDivergenciasDiasAulasTitularCJ(IEnumerable<SME.SR.Infra.AulaTitularCJDataControleGradeDto> datas, bool existeProximoNivel = false)
    {
        var str = "";
        var retornoVerificacao = string.Empty;
        var somenteCabecalho = false;

        str += MontaCabecalhoDivergenciasDiasAulasTitularCJ();
        var ultimaData = datas.LastOrDefault();

        foreach (var data in datas)
        {
            str += MontaCabecalhoDivergenciasDiasAulasTitularCJSomenteData(data.Data);

            foreach (var aula in data.Divergencias)
            {
                str += $@" <tr>
            <td width='20%' class='td-valor'>{aula.QuantidadeAulas}</td>
            <td width='30%' class='td-valor'>{aula.ProfessorTitular}</td>
            <td width='30%' class='td-valor'>{aula.ProfessorCJ}</td>
          </tr>";
                contadorQuebrarPagina = contadorQuebrarPagina + 1;
                //retornoVerificacao = VerificaQuebra();

            }

            str += $@"</table>";
            if (existeProximoNivel)
            {
                str += LinhaEmBranco();
                contadorQuebrarPagina += 1;
                retornoVerificacao = VerificaQuebra();
                if (retornoVerificacao != string.Empty)
                {
                    str += retornoVerificacao;
                }
            }
        }

        return str;
    }

    string MontaCabecalhoDivergenciasAulasDuplicadas()
    {
        contadorQuebrarPagina += 3;
        return $@"<table class='fixed'>
          <tr>
            <td width='100%' class='td-turma-bimestre'>
              AULAS DUPLICADAS
            </td>
          </tr>
        </table>
        <table class='fixed'>
          <tr>
            <td width='25%' class='td-titulo'>DATA</td>
            <td width='25%' class='td-titulo'>QUANTIDADE DE REGISTROS DUPLICADOS</td>
            <td width='50%' class='td-titulo'>PROFESSOR</td>
          </tr>";
    }

    string MontaDivergenciasAulasDuplicadas(IEnumerable<SME.SR.Infra.AulaDuplicadaControleGradeDto> aulas, bool existeProximoNivel = false)
    {
        var str = MontaCabecalhoDivergenciasAulasDuplicadas();
        var retornoVerificacao = string.Empty;
        var ultimaAula = aulas.LastOrDefault();
        foreach (var aula in aulas)
        {
            str += $@"<tr>
                <td width='25%' class='td-valor'>{aula.Data}</td>
                <td width='25%' class='td-valor'>{aula.QuantidadeDuplicado}</td>
                <td width='50%' class='td-valor'>{aula.Professor}</td>
              </tr>";

            contadorQuebrarPagina += 1;

            retornoVerificacao = VerificaQuebra();
            if (retornoVerificacao != string.Empty)
            {
                str = str + $@"</table>{retornoVerificacao}";
                if (aula != ultimaAula)
                {
                    str += MontaCabecalhoDivergenciasAulasDuplicadas();
                }
                else
                {
                    str += "<table>";
                }

                //str = str + $@"</table>{retornoVerificacao}{MontaCabecalhoDivergenciasAulasDuplicadas()}";
            }
        }

        str += $@"</table>";
        if (existeProximoNivel)
        {
            if(contadorQuebrarPagina != 12)
            {
                str += LinhaEmBranco();
            }

            contadorQuebrarPagina += 1;
            retornoVerificacao = VerificaQuebra();
            if (retornoVerificacao != string.Empty)
            {
                str += retornoVerificacao;
            }
        }

        return str;
    }

    string MontaCabecalhoDivergenciasAulasDiasNaoLetivos()
    {
        contadorQuebrarPagina = contadorQuebrarPagina + 3;
        return $@"<table class='fixed'>
              <tr>
                <td width='100%' class='td-turma-bimestre'>
                  AULAS EM DIAS NÃO LETIVOS
                </td>
              </tr>
            </table><table class='fixed'>
          <tr>
            <td width='20%' class='td-titulo'>DATA</td>
            <td width='20%' class='td-titulo'>MOTIVO NÃO LETIVO</td>
            <td width='20%' class='td-titulo'>QUANTIDADE DE AULAS</td>
            <td width='40%' class='td-titulo'>PROFESSOR</td>
          </tr>";

    }

    string MontaDivergenciasAulasDiasNaoLetivos(IEnumerable<SME.SR.Infra.AulaDiasNaoLetivosControleGradeDto> aulas, bool existeProximoNivel = false)
    {
        var str = MontaCabecalhoDivergenciasAulasDiasNaoLetivos();

        var retornoVerificacao = string.Empty;
        var ultimaAula = aulas.LastOrDefault();
        foreach (var aula in aulas)
        {
            str += $@"<tr>
                        <td width='20%' class='td-valor'>{aula.Data}</td>
                        <td width='20%' class='td-valor'>{aula.Motivo}</td>
                        <td width='20%' class='td-valor'>{aula.QuantidadeAulas}</td>
                        <td width='40%' class='td-valor'>{aula.Professor}</td>
                      </tr>";

            contadorQuebrarPagina = contadorQuebrarPagina + (aula.Motivo.Length > 12 ? (int)(aula.Motivo.Length / 12) + 1 : 1);

            retornoVerificacao = VerificaQuebra();
            if (retornoVerificacao != string.Empty)
            {
                str = str + $@"</table>{retornoVerificacao}";
                if (aula != ultimaAula)
                {
                    str += MontaCabecalhoDivergenciasAulasDiasNaoLetivos();
                } else
                {
                    str += "<table>";
                }

            }
        }

        str += $@"</table>";
        if (existeProximoNivel)
        {
            str += LinhaEmBranco();
            contadorQuebrarPagina += 1;
            retornoVerificacao = VerificaQuebra();
            if (retornoVerificacao != string.Empty)
            {
                str += retornoVerificacao;
            }
        }


        return str;
    }

    string MontaCabecalhoDivergenciasAulasCriadasXPrevistas()
    {
        contadorQuebrarPagina = contadorQuebrarPagina + 2;
        return $@"<table class='fixed'>
  <tr>
    <td width='100%' class='td-turma-bimestre'>
      VISÃO POR SEMANA DE AULAS CRIADAS X PREVISTO NA MATRIZ CURRICULAR
    </td>
  </tr>
</table>
<table class='fixed' style='margin-bottom: 22px;'>
  <tr>
    <td width='20%' class='td-titulo'>SEMANA</td>
    <td width='20%' class='td-titulo'>QUANTIDADE DE DIAS LETIVOS</td>
    <td width='20%' class='td-titulo'>AULAS PREVISTAS NA GRADE</td>
    <td width='20%' class='td-titulo'>AULAS CRIADAS</td>
    <td width='20%' class='td-titulo'>DIFERENÇA</td>
  </tr>";

    }

    string MontaDivergenciasAulasCriadasXPPrevistas(IEnumerable<SME.SR.Infra.VisaoSemanalControleGradeSinteticoDto> aulas)
    {
        var str = MontaCabecalhoDivergenciasAulasCriadasXPrevistas();
        var retornoVerificacao = string.Empty;
        var ultimaAula = aulas.LastOrDefault();

        foreach (var aula in aulas)
        {
            str += $@"<tr>
                    <td width='20%' class='td-valor'>{aula.Data}</td>
                    <td width='20%' class='td-valor'>{aula.DiasLetivo}</td>
                    <td width='20%' class='td-valor'>{aula.QuantidadeGrade}</td>
                    <td width='20%' class='td-valor'>{aula.AulasCriadas}</td>
                    <td width='20%' class='td-valor'>{aula.Diferenca}</td>
                  </tr>";

            contadorQuebrarPagina += 1;

            if (aula.Data == "17/11/2020")
            {
                var i = 0;
            }

            retornoVerificacao = VerificaQuebra();
            if (retornoVerificacao != string.Empty)
            {
                str = str + $@"</table>{retornoVerificacao}";
                if (aula != ultimaAula)
                {
                    str += MontaCabecalhoDivergenciasAulasCriadasXPrevistas();
                }
                else
                {
                    str += "<table>";
                }

            }
        }

        str += "</table>";
        return str;
    }
}

<!DOCTYPE html>
<html lang='pt-BR'>
<head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <title>RELATÓRIO CONTROLE DE GRADE - ANALÍTICO</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto" rel="stylesheet">
</head>

<body class='body-rel'>
    <style>
        .body-rel {
            margin: 0.5cm auto;
            font-family: 'Roboto', sans-serif;
            width: 21cm;
            min-height: 29.7cm;
            background: white;
            color: #42474a;
        }

        .titulo-sgp {
            text-align: right;
            font-size: 14px;
            font-weight: bold;
        }

        .titulo-plano-aula {
            text-align: right;
            font-size: 14.5px;
        }

        .img-logo-sgp {
            height: 64px;
            float: left;
        }

        .header-pagina {
            margin-top: 33px;
            margin-bottom: 22px;
        }

            .header-pagina td {
                text-align: left;
                padding-left: 15px;
                padding-top: 5px;
                padding-bottom: 5px;
            }

        .campo-dre {
            width: 25%;
        }

        .campo-ue {
            width: 60%;
        }

        .campo-ano {
            width: 15%;
        }

        .campo-componente-curricular {
            width: 70%;
            border-top: none;
        }

        .campo-bimestre {
            width: 30%;
            border-top: none;
        }

        .campo-usuario {
            width: 50%;
            border-top: none;
        }

        .campo-rf-data {
            width: 20%;
            border-top: none;
        }

        table {
            display: table;
            width: 100%;
            height: 24px;
            border-color: #42474a;
            empty-cells: show;
            border: none;
            border-collapse: collapse;
        }

        thead {
            background-color: #f3f3f3;
        }

        th {
            border: 1px solid #42474a;
            font-weight: normal;
        }

        td {
            border: 1px solid #42474a;
        }

        tr {
            height: 24px;
        }

        .fonte-16 {
            font-size: 16px !important;
        }

        .fonte-14 {
            font-size: 14px !important;
        }

        .fonte-12 {
            font-size: 12px !important;
        }

        .alinhar-esquerda {
            text-align: left;
        }

        .rodape-rel-faltas-frequencia {
            margin-top: 10px;
            font-size: 9px;
            font-weight: bold;
        }

        .titulo-sgp-rodape {
            float: left;
        }

        .contador-pagina {
            float: right;
            font-size: 15px;
        }

        .thLimpo {
            background-color: #ffffff;
        }

        .tb-head {
            background-color: #f3f3f3;
            text-align: left;
            font-size: 16px;
            padding: 10px;
            padding-left: 20px;
        }

        .td-turma-bimestre {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 16px;
            font-weight: bold;
            padding: 5px;
            border-bottom: none;
        }

        .td-titulo {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 14px;
            padding: 2px;
            padding-top: 5px;
            padding-bottom: 5px;
            border-bottom: none;
            border-bottom: none;
        }

        .td-titulo-2 {
            background-color: #f3f3f3;
            text-align: center;
            font-size: 12px;
            padding: 2px;
            padding-top: 5px;
            padding-bottom: 5px;
            border-bottom: none;
        }

        .td-valor {
            text-align: center;
            font-size: 12px;
            padding: 2px;
            padding-top: 6px;
            padding-bottom: 6px;
        }

        .caixa-1 {
            text-align: justify;
            padding: 20px 15px 20px 15px;
        }

        .caixa-2 {
            padding: 10px 15px 10px 15px;
            text-align: justify;
            border-top: none;
        }

        .h-50 {
            height: 50px;
        }

        .m-30 {
            margin-top: 30px;
        }

        .tabela-objetivos-items-tr {
            height: 50px;
        }

        .tabela-objetivos-items-titulo {
            padding: 20px 15px 20px 15px;
            border-top: none;
            text-align: center;
            font-weight: bold;
            width: 15%;
        }

        .tabela-objetivos-items-descricao {
            border-top: none;
            width: 85%;
            text-align: justify;
            padding: 5px 15px 5px 15px;
            font-size: 14px;
        }

        table.fixed {
            table-layout: fixed;
        }

            table.fixed td {
                overflow: hidden;
            }
    </style>
    <div>
        @Html.Raw(MontarCabecalho())
        @Html.Raw(MontarCorpo())
    </div>
</body>
</html>
