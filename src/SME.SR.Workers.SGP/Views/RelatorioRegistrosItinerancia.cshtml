@model SME.SR.Infra.RelatorioListagemRegistrosItineranciaDto;

@{
    const string TODAS = "TODAS";

    var mostrarDre = Model.Dre == TODAS;
    var mostrarUe = Model.Ue == TODAS;
    var mostrarAgrupamento = mostrarDre || mostrarUe;

    int contadorQuebrarPagina = 0;
    int contadorMaximoLinhasPorPagina = 51;

    const int TAMANHO_MAX_NOME_PAAI_RESPONSAVEL = 40;
    const int QDADE_LINHAS_CABECALHO_GERAL = 9;
    const int QDADE_LINHAS_CABECALHO_SECAO_ITINERANCIA = 5;
    const int QDADE_LINHAS_LINHA_UNICA = 1;
    const int QDADE_CHARS_POR_LINHA = 105;
    const string LABEL_CRIANCAS_ESTUDANTES = "CRIANÇAS/ESTUDANTES: ";
    const string LABEL_PAAI_RESPONSAVEL = "PAAI RESPONSÁVEL: ";
    const string LABEL_SITUACAO = "SITUAÇÃO: ";


    int RetornarQdadeLinhasPrevistas(int qdadeChars) {
        var retorno = (int)Math.Round((double)(qdadeChars / QDADE_CHARS_POR_LINHA));
        //if (retorno > 1) retorno = (int) (retorno * 0.5);
        if (qdadeChars % QDADE_CHARS_POR_LINHA > 0)
            retorno++;
        return retorno;
    }

    Microsoft.AspNetCore.Html.IHtmlContent MontarHTMLQuebraPagina()
    {
        contadorQuebrarPagina = 0;
        var str = @"<div style='page-break-before:always' />";
        return Html.Raw(str);
    }

    Microsoft.AspNetCore.Html.IHtmlContent MontarHTMLAberturaTable()
    {
        var str = @"<table class='tabela-cabecalho'> <tbody> ";
        return Html.Raw(str);
    }

    Microsoft.AspNetCore.Html.IHtmlContent MontarHTMLFechamentoTable()
    {
        var str = @"</tbody></table>";
        return Html.Raw(str);
    }


    void AvaliarQuebraPagina(int numeroLinhasPrevistas, bool efetuaFechamentoAberturaTables = true)
    {
        bool quebra = (contadorQuebrarPagina + numeroLinhasPrevistas) > contadorMaximoLinhasPorPagina;
        if (!quebra)
            return;

        if (efetuaFechamentoAberturaTables) 
            @MontarHTMLFechamentoTable();
        @MontarHTMLQuebraPagina();
        MontarCabecalho();
        if (efetuaFechamentoAberturaTables)
            @MontarHTMLAberturaTable()
    }

    void MontarCabecalho()
    {
        <div>
            <img class='img-logo-sgp' src='logoMono.png' alt='Logo SGP' />
        </div>
        <div class='titulo-sgp'>SGP - SISTEMA DE GESTÃO PEDAGÓGICA</div>
        <div class='titulo-relatorio'>RELATÓRIO DE REGISTRO DE ITINERÂNCIA</div>
        <div class='fonte-14 header-pagina'>
            <table class='tblTopo'>
                <tbody>
                    <tr>
                        <td class='espaco-esquerda-15 width-22 espacamento7'><strong>DRE:</strong> @Model.Dre</td>
                        <td class='espaco-esquerda-15 espacamento7' colspan="2"><strong>UE:</strong> @Model.Ue</td>
                    </tr>
                </tbody>
            </table>
            <table class='tblTopo'>
                <tbody>
                    <tr>
                        <td class='espaco-esquerda-15 width-70 espacamento7 sem-border-top'><strong>USUÁRIO:</strong> @Model.Usuario</td>
                        <td class='espaco-esquerda-15 espacamento7 sem-border-top' colspan="2"><strong>DATA IMPRESSÃO:</strong> @Model.DataSolicitacao.ToString("dd/MM/yyyy")</td>
                    </tr>
                </tbody>
            </table>
        </div>
        contadorQuebrarPagina = contadorQuebrarPagina + QDADE_LINHAS_CABECALHO_GERAL;
    }
    
    void MontarCabecalhoSecao(string Dre, string Ue) {
        <table class="tabela-cabecalho">
        <tbody>
            <tr>
                @if (mostrarDre)
                {
                <td class='fundo-cinza-escuro espaco-esquerda-15 width-22 sem-border-bottom'><strong>DRE:</strong> @Dre</td>
                }

                @if (mostrarUe)
                {
                <td class='fundo-cinza-escuro espaco-esquerda-15 sem-border-bottom' colspan="2"><strong>UE:</strong> @Ue</td>
                }
            </tr>
        </tbody>
        </table>
        contadorQuebrarPagina = contadorQuebrarPagina + QDADE_LINHAS_LINHA_UNICA;
    }

    void MontarDataVisitaItinerancia(DateTime dataVisita)
    {
        <tr>
            <td class="fundo-cinza-escuro centralizar" colspan="2"><strong>DATA DA VISITA:</strong> @dataVisita.ToString("dd/MM/yyyy")</td>
        </tr>
        contadorQuebrarPagina = contadorQuebrarPagina + QDADE_LINHAS_LINHA_UNICA;
    }

    void MontarObjetivosItinerancia(string objetivos)
    {
        var qdadeLinhasPrevista = RetornarQdadeLinhasPrevistas(objetivos.Length) +
                                                      QDADE_LINHAS_LINHA_UNICA;
        AvaliarQuebraPagina(qdadeLinhasPrevista);

        MontarTitulo("OBJETIVOS DA ITINERÂNCIA");
        <tr>
            <td class="alinhar-esquerda td-descricao" colspan="2"><span class="span-descricao">@objetivos</span></td>
        </tr>
        contadorQuebrarPagina += qdadeLinhasPrevista;
    }

    void MontarCriancasItinerancia(string criancas)
    {
        var qdadeLinhasPrevista = RetornarQdadeLinhasPrevistas(criancas.Length + LABEL_CRIANCAS_ESTUDANTES.Length);
        AvaliarQuebraPagina(qdadeLinhasPrevista);
        <tr>
            <td class="espaco-esquerda-7 alinhar-esquerda td-descricao" colspan="2"><strong>@LABEL_CRIANCAS_ESTUDANTES</strong><span class="span-descricao">@criancas</span></td>
        </tr>
        contadorQuebrarPagina += qdadeLinhasPrevista;
    }

    void MontarPAAIResponsavelSituacao(string paai, string situacao)
    {
        var qdadeLinhasPrevista = paai.Length > TAMANHO_MAX_NOME_PAAI_RESPONSAVEL ? 2 : 1;
        AvaliarQuebraPagina(qdadeLinhasPrevista);
        <tr>
            <td class='espaco-esquerda-7 alinhar-esquerda'><strong>@LABEL_PAAI_RESPONSAVEL</strong>@paai</td>
            <td class='espaco-esquerda-7 alinhar-esquerda width-30'><strong>@LABEL_SITUACAO</strong>@situacao</td>
        </tr>
        contadorQuebrarPagina += qdadeLinhasPrevista;
    }

    void MontarTitulo(string valor)
    {
        <tr>
            <td class="fundo-cinza centralizar" colspan="2"><strong>@valor</strong></td>
        </tr>
    }
}
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RELATÓRIO DE REGISTRO DE ITINERÂNCIA</title>
</head>
<body class="body-relatorio">
    <style>
        .tblTopo th, td {
            margin-top: 5px;
            padding: 3px;
            text-align: left;
        }

        .body-relatorio {
            margin: 0.5cm auto;
            font-family: "Roboto Mono", monospace !important;
            width: 21cm;
            min-height: 29.7cm;
            background: white;
            color: #42474a;
        }

        .titulo-sgp {
            text-align: right;
            font-size: 14px;
            font-weight: bold;
        }

        .titulo-relatorio {
            text-align: right;
            font-size: 14.5px;
            margin-top: 7px;
        }

        .header-pagina {
            margin-top: 43px;
            margin-bottom: 22px;
        }

            .header-pagina td {
                text-align: left;
            }

        .alinhar-esquerda {
            text-align: left;
        }

        .centralizar {
            text-align: center;
        }

        .td-descricao {
            max-width: 784px;
            height: auto;
            word-wrap: break-word
        }

        .span-descricao {
            padding: 16px;
        }

        table {
            display: table;
            width: 100%;
            border-color: #42474a;
            empty-cells: show;
            border: none;
            border-collapse: collapse;
        }

        thead {
            background-color: #f3f3f3;
        }

        th {
            border: 1px solid #42474a;
            font-weight: normal;
        }

        td {
            border: 1px solid #42474a;
        }

        td span {
            font-size: 12px;
        }

        .tabela-cabecalho tr {
            font-size: 14px;
            height: 24px;
        }

        .fonte-14 {
            font-size: 14px !important;
        }

        .espaco-esquerda-15 {
            padding-left: 15px;
        }

        .espaco-esquerda-7 {
            padding-left: 7px;
        }

        .fundo-cinza {
            background-color: #f3f3f3;
        }

        .fundo-cinza-escuro {
            background-color: #DADADA;
        }

        .negrito {
            font-weight: bold;
        }

        .espacamento7 {
            padding: 7px;
        }

        .sem-border-top {
            border-top: 0;
        }

        .sem-border-bottom {
            border-bottom: 0;
        }

        .img-logo-sgp {
            height: 63px;
            float: left;
        }

        .width-22 {
            width: 22%;
        }

        .width-30 {
            width: 33%;
        }

        .width-70 {
            width: 70%;
        }
    </style>
    <div>
        @{
            MontarCabecalho();
            @foreach (var itineranciaDreUe in Model.Registros.GroupBy(itinerancia => new { itinerancia.Dre, itinerancia.Ue }))
            {
                @if (mostrarAgrupamento)
                {
                    var qdadeLinhasPrevista = RetornarQdadeLinhasPrevistas(itineranciaDreUe.FirstOrDefault().Objetivos.Length) +
                                                                            QDADE_LINHAS_LINHA_UNICA + QDADE_LINHAS_LINHA_UNICA + QDADE_LINHAS_LINHA_UNICA;
                    AvaliarQuebraPagina(qdadeLinhasPrevista, false);
                    MontarCabecalhoSecao(@itineranciaDreUe.Key.Dre, @itineranciaDreUe.Key.Ue);
                }
                <table class="tabela-cabecalho">
                    <tbody>

                        @foreach (var itineranciaDataVisita in itineranciaDreUe.GroupBy(itinerancia => itinerancia.DataVisita))
                        {
                            var qdadeLinhasPrevista = RetornarQdadeLinhasPrevistas(itineranciaDataVisita.FirstOrDefault().Objetivos.Length) +
                                                       QDADE_LINHAS_LINHA_UNICA + QDADE_LINHAS_LINHA_UNICA;
                            AvaliarQuebraPagina(qdadeLinhasPrevista);
                            MontarDataVisitaItinerancia(itineranciaDataVisita.Key);
                            @foreach (var itinerancia in itineranciaDataVisita)
                            {
                                MontarObjetivosItinerancia(itinerancia.Objetivos);
                                MontarCriancasItinerancia(!String.IsNullOrEmpty(itinerancia.Alunos) ? itinerancia.Alunos : "Registro sem crianças/estudantes vinculados");
                                MontarPAAIResponsavelSituacao(itinerancia.ResponsavelPaai, itinerancia.Situacao);
                            }
                        }
                    </tbody>
                </table>
                <br />    
                contadorQuebrarPagina += QDADE_LINHAS_LINHA_UNICA;
            }
        }
            </div>
        </body>
        </html>
