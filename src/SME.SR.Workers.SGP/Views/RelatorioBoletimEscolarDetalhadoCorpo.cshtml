@model SME.SR.Infra.BoletimEscolarDetalhadoAlunoDto
@using SME.SR.Infra;

@{
    double contadorQuebrarPagina = 6;
    int contadorMaximoLinhasPorPagina = 48;
    bool quebrou = false;

    Microsoft.AspNetCore.Html.IHtmlContent MontarQuebrarPagina()
    {
        var str = $@"<div style='page-break-before:always' />";
        return Html.Raw(str);
    }

    int contadorPagina = 1;

    string VerificaQuebra()
    {
        if (contadorQuebrarPagina >= contadorMaximoLinhasPorPagina)
        {
            contadorQuebrarPagina = 6;
            contadorPagina = contadorPagina + 1;

            //var str = MontarCabecalho();
            return $@"<div style='page-break-before:always'></div>";

        }
        return string.Empty;

    }

    string ComponentesCurricularesCabecalho(bool conceito)
    {
        contadorQuebrarPagina += 2;
        var notaConceito = conceito ? "Conc." : "Nota";
        return $@"<table class='tabela margin-top'>
<tr class='titulo'>
<td rowspan='2' class='componente sem-borda-bottom'>Componentes curriculares</td>
<td colspan='2' class='centro-bimestre'>1° Bim.</td>
<td colspan='2' class='centro-bimestre'>2° Bim.</td>
<td colspan='2' class='centro-bimestre'>3° Bim.</td>
<td colspan='2' class='centro-bimestre'>4° Bim.</td>
<td colspan='2' class='centro-bimestre'>Final</td>
</tr>
<tr class='titulo'>
<td class='centro-titulo sem-borda-bottom'>{notaConceito}</td>
<td class='centro-titulo sem-borda-bottom'>%</td>
<td class='centro-titulo sem-borda-bottom'>{notaConceito}</td>
<td class='centro-titulo sem-borda-bottom'>%</td>
<td class='centro-titulo sem-borda-bottom'>{notaConceito}</td>
<td class='centro-titulo sem-borda-bottom'>%</td>
<td class='centro-titulo sem-borda-bottom'>{notaConceito}</td>
<td class='centro-titulo sem-borda-bottom'>%</td>
<td class='centro-titulo sem-borda-bottom'>{notaConceito}</td>
<td class='centro-titulo sem-borda-bottom'>%</td>
</tr></table>";
    }

    bool ChecarNotaConceitoRegencia(List<ComponenteCurricularRegenciaNotaDto> componentes)
    {
        return componentes.Where(a =>
            (a.NotaBimestre1 != null && (a.NotaBimestre1.Contains("P") || a.NotaBimestre1.Contains("S"))) ||
            (a.NotaBimestre2 != null && (a.NotaBimestre2.Contains("P") || a.NotaBimestre2.Contains("S"))) ||
            (a.NotaBimestre3 != null && (a.NotaBimestre3.Contains("P") || a.NotaBimestre3.Contains("S"))) ||
            (a.NotaBimestre4 != null && (a.NotaBimestre4.Contains("P") || a.NotaBimestre4.Contains("S")))
            ).Any();
    }

    bool ChecarNotaConceito(List<AreaConhecimentoComponenteCurricularDto> areasConhecimento)
    {
        return areasConhecimento.Where(a =>
            a.ComponentesCurriculares.Any(b =>
                (b.NotaBimestre1 != null && (b.NotaBimestre1.Contains("P") || b.NotaBimestre1.Contains("S"))) ||
                (b.NotaBimestre2 != null && (b.NotaBimestre2.Contains("P") || b.NotaBimestre2.Contains("S"))) ||
                (b.NotaBimestre3 != null && (b.NotaBimestre3.Contains("P") || b.NotaBimestre3.Contains("S"))) ||
                (b.NotaBimestre4 != null && (b.NotaBimestre4.Contains("P") || b.NotaBimestre4.Contains("S"))))
            ).Any();
    }

    string ComponentesCurriculares(List<AreaConhecimentoComponenteCurricularDto> areasConhecimento, ComponenteCurricularRegenciaDto componenteCurricularRegencia)
    {
        bool exibeLegendaConceito = false;
        bool exibeLegendaSintese = false;

        var str = "";
        var notaConceito = componenteCurricularRegencia != null ? ChecarNotaConceitoRegencia(componenteCurricularRegencia.ComponentesCurriculares) : false;

        if (!notaConceito)
            notaConceito = ChecarNotaConceito(areasConhecimento);

        str += ComponentesCurricularesCabecalho(notaConceito);

        if (componenteCurricularRegencia != null)
        {
            str += "<table class='tabela'>";
            foreach (var componente in componenteCurricularRegencia.ComponentesCurriculares)
            {
                if (!componente.Nota)
                    exibeLegendaSintese = true;

                if (!string.IsNullOrEmpty(componente.NotaBimestre1) && (componente.NotaBimestre1.Contains("P") || componente.NotaBimestre1.Contains("S")))
                    exibeLegendaConceito = true;

                var notaFinal = string.IsNullOrEmpty(componenteCurricularRegencia.FrequenciaFinal) ? "" : $"{componenteCurricularRegencia.FrequenciaFinal}%";
                str += $@"<tr class='corpo'>
<td class='valor-titulo'>{componente.Nome}</td>
<td class='centro-valor'>{componente.NotaBimestre1}</td>
<td class='centro-valor'>{componenteCurricularRegencia.FrequenciaBimestre1}</td>
<td class='centro-valor'>{componente.NotaBimestre2}</td>
<td class='centro-valor'>{componenteCurricularRegencia.FrequenciaBimestre2}</td>
<td class='centro-valor'>{componente.NotaBimestre3}</td>
<td class='centro-valor'>{componenteCurricularRegencia.FrequenciaBimestre3}</td>
<td class='centro-valor'>{componente.NotaBimestre4}</td>
<td class='centro-valor'>{componenteCurricularRegencia.FrequenciaBimestre4}</td>
<td class='centro-valor'>{componente.NotaFinal}</td>
<td class='centro-valor'>{notaFinal}</td>
</tr>";
                contadorQuebrarPagina += componente.Nome.Length >= 42 ? 2 : 1;
            }
            str += "</table>";
        }

        var quebrou = false;
        for (var i = 0; i < areasConhecimento.Count; i++)
        {

            if (i == 0 && componenteCurricularRegencia != null)
            {
                contadorQuebrarPagina += 0.5;
                str += "<table class='tabela margin-top'>";
            }
            else if (i > 0 && quebrou == false)
            {
                contadorQuebrarPagina += 0.5;
                str += "<table class='tabela margin-top'>";
            }
            else
            {
                quebrou = false;
                str += "<table class='tabela'>";
            }
            foreach (var componenteCurricular in areasConhecimento[i].ComponentesCurriculares)
            {
                if (!componenteCurricular.Nota)
                    exibeLegendaSintese = true;

                if (notaConceito)
                    exibeLegendaConceito = true;

                var notaFinal = string.IsNullOrEmpty(componenteCurricular.FrequenciaFinal) ? "" : $"{componenteCurricular.FrequenciaFinal}%";

                str += $@"<tr class='corpo'>
<td class='valor-titulo'>{componenteCurricular.Nome}</td>
<td class='centro-valor'>{componenteCurricular.NotaBimestre1}</td>
<td class='centro-valor'>{componenteCurricular.FrequenciaBimestre1}</td>
<td class='centro-valor'>{componenteCurricular.NotaBimestre2}</td>
<td class='centro-valor'>{componenteCurricular.FrequenciaBimestre2}</td>
<td class='centro-valor'>{componenteCurricular.NotaBimestre3}</td>
<td class='centro-valor'>{componenteCurricular.FrequenciaBimestre3}</td>
<td class='centro-valor'>{componenteCurricular.NotaBimestre4}</td>
<td class='centro-valor'>{componenteCurricular.FrequenciaBimestre4}</td>
<td class='centro-valor'>{componenteCurricular.NotaFinal}</td>
<td class='centro-valor'>{notaFinal}</td>
</tr>";
                contadorQuebrarPagina += componenteCurricular.Nome.Length >= 42 ? 2 : 0.5;
            }
            str += "</table>";
            var quebra = VerificaQuebra();
            if (quebra != String.Empty)
            {
                str += quebra;
                if (i != areasConhecimento.Count - 1)
                    str += ComponentesCurricularesCabecalho(notaConceito);
                quebrou = true;
            }
        }

        if (exibeLegendaSintese || exibeLegendaConceito)
        {
            str += "<p>Legenda: F:Frequente - NF:Não Frequente - P:Plenamente Satisfatório - S:Satisfatório - NS:Não Satisfatório</p>";
        }

        return str;
    }

    string ParecerConclusivo(string parecer)
    {
        var str = $@"<table class='tabela margin-top'>
<tr class='titulo'>
<td>Parecer Conclusivo: {parecer}</td>
</tr>
</table>";
        contadorQuebrarPagina += string.IsNullOrEmpty(parecer) ? 1 : 0;
        return !string.IsNullOrEmpty(parecer) ? str : null;
    }

    string Recomendacoes(string recomendacoes, string titulo)
    {
        if (string.IsNullOrEmpty(recomendacoes))
            return null;

        var tamanhoRecomendacoes = (recomendacoes.Length >= 110 ? (recomendacoes.Length / 110) + 1 : 1);

        var cabecalho = $@"<table class='tabela-recomendacoes margin-top'>
    <tr class='titulo'>
    <td>{titulo}</td>
    </tr>
    <tr>
    <td style='font-size: 12px; text-align: justify; text-justify: inter-word;'>";
        contadorQuebrarPagina += 1;

        var rodape = "</td></tr></table>";

        var str = cabecalho;
        var tamanhoParaLer = 0;
        for (var i = 0; i < tamanhoRecomendacoes; i++)
        {

            if((tamanhoParaLer >= recomendacoes.Length) || (tamanhoParaLer + 108 >= recomendacoes.Length))
                str += recomendacoes.Substring(tamanhoParaLer);
            else
                str += recomendacoes.Substring(tamanhoParaLer, 108);
            tamanhoParaLer += 108;
            contadorQuebrarPagina += 0.7;
            if (contadorQuebrarPagina >= contadorMaximoLinhasPorPagina)
                str += rodape;

            var quebra = VerificaQuebra();
            if (quebra != String.Empty)
            {
                str += quebra + cabecalho;
                contadorQuebrarPagina += 1;

            }
        }

        return str + rodape;

    }

    string Anotacoes()
    {
        var str = @"<table class='tabela-final margin-top'>
<tr>
<td width='100%' style='border-bottom: 1px solid #42474a;'>
&nbsp
</td>
</tr>
<tr>
<td width='100%' style='border-bottom: 1px solid #42474a;'>
&nbsp
</td>
</tr>
</table>";

        return str;
    }

}


@Html.Raw(ComponentesCurriculares(Model.AreasConhecimento, Model.ComponenteCurricularRegencia))

@if (Model.ParecerConclusivo != String.Empty)
{
    @Html.Raw(ParecerConclusivo(Model.ParecerConclusivo));
}

@Html.Raw(Recomendacoes(Model.RecomendacoesEstudante, "Recomendações ao estudante"))
@Html.Raw(Recomendacoes(Model.RecomendacoesFamilia, "Recomendações a família"))
@Html.Raw(Anotacoes())
