
@model SME.SR.Infra.RelatorioNotificacoesDto
@using System.Text.RegularExpressions;
@using SME.SR.Infra.Utilitarios;

@{
    double contadorQuebrarPagina = 0;
    int contadorMaximoLinhasPorPagina = 44;
    bool quebrou = false;

    void MontarCabecalho()
    {
        contadorQuebrarPagina = contadorQuebrarPagina + 8;
        <div>
            <img class='img-logo-sgp' src='logoMono.png' alt='Logo SGP' />
        </div>
        <div class='titulo-sgp'>SGP - SISTEMA DE GESTÃO PEDAGÓGICA</div>
        <div class='titulo-relatorio'>RELATÓRIO DE NOTIFICAÇÕES</div>
        <div class='fonte-14 header-pagina'>
            <table class='tblTopo'>
                <tbody>
                    <tr>
                        <td width='20%' class='espaco-esquerda-15'>DRE: @Model.Cabecalho.Dre</td>
                        <td width='80%' class='espaco-esquerda-15'>UE: @Model.Cabecalho.Ue</td>
                    </tr>
                </tbody>
            </table>
            <table>
                <tbody>
                    <tr>
                        <td width='70%' class='sem-border-top espaco-esquerda-15'>USUÁRIO: @Model.Cabecalho.Usuario</td>
                        <td width='12%' class='sem-border-top espaco-esquerda-15'>RF: @Model.Cabecalho.RF</td>
                        <td width='18%' class='sem-border-top espaco-esquerda-15'>DATA: @Model.Cabecalho.Data</td>
                    </tr>
                </tbody>
            </table>
        </div>
    }

    bool VerificaQuebra(double numeroLinhasDescricao = 0)
    {
        if (contadorQuebrarPagina + numeroLinhasDescricao >= contadorMaximoLinhasPorPagina)
        {
            contadorQuebrarPagina = 0;
            contadorQuebrarPagina = contadorQuebrarPagina + 1;
            quebrou = true;
            return true;
        }
        quebrou = false;
        return false;

    }

    string InformacoesQuebra()
    {
        @Html.Raw("</tbody></table>");
        @Html.Raw("<div style='page-break-before:always'></div>");

        return "";
    }

    void ImprimirQuebra()
    {
        InformacoesQuebra();
        MontarCabecalho();
    }

    void LinhaEmBranco()
    {
        <tr>
            <td colspan="7"></td>
        </tr>
    }

    void MontarTexto(string texto)
    {
        <tr>
            <td class="fundo-cinza" colspan="7">@texto @contadorQuebrarPagina</td>
        </tr>
    }

    void MontarTitulo()
    {
        <tr>
            <td width='11%' class='fundo-cinza'>CÓDIGO</td>
            <td width='25%' class='fundo-cinza'>TÍTULO DA NOTIFICAÇÃO</td>
            <td width='12%' class='fundo-cinza'>CATEGORIA</td>
            <td width='12%' class='fundo-cinza'>TIPO</td>
            <td width='12%' class='fundo-cinza'>SITUAÇÃO @contadorQuebrarPagina</td>
            <td width='15%' class='fundo-cinza'>RECEBIMENTO</td>
            <td width='15%' class='fundo-cinza'>LEITURA/AÇÃO</td>
        </tr>
    }

    void MontarLinhaTabela(SME.SR.Infra.NotificacaoRelatorioDto notificacoes)
    {
        <tr>
            <td width='11%'>@notificacoes.Codigo</td>
            <td width='25%' class=" alinhar-esquerda espaco-esquerda-15">@notificacoes.Titulo</td>
            <td width='12%'>@notificacoes.Categoria</td>
            <td width='12%'>@notificacoes.Tipo</td>
            <td width='12%'>@notificacoes.Situacao @contadorQuebrarPagina</td>
            <td width='15%'>@notificacoes.DataRecebimento</td>
            <td width='15%'>@notificacoes.DataLeitura</td>
        </tr>
    }
    
    string MontarTextoDescricao(string descricao)
    {
        int iContadorCaracteres = 0;
        int contadorMaximoCaracteresPorLinha = descricao.Length > 7000 ? 250 : 350;

        @while (iContadorCaracteres != descricao.Length)
        {
            if (contadorQuebrarPagina + 1 > contadorMaximoLinhasPorPagina)
            {
                contadorQuebrarPagina = 0;
                @Html.Raw("</td></tr>");
                ImprimirQuebra();
                @Html.Raw("<table class='tabela-cabecalho'><tbody>");
                MontarTexto("DESCRIÇÃO");
                @Html.Raw("<tr><td class='alinhar-esquerda espaco-esquerda-8' colspan='7'>");
            }
            else
            {
                var qntCaracteresParaBuscar = descricao.Length - iContadorCaracteres < contadorMaximoCaracteresPorLinha ? descricao.Length - iContadorCaracteres : contadorMaximoCaracteresPorLinha;
                var textParaExibir = descricao.Substring(iContadorCaracteres, qntCaracteresParaBuscar);
                iContadorCaracteres += textParaExibir.Length;
                <span>@Html.Raw(textParaExibir)</span>
                @Html.Raw(contadorQuebrarPagina)
            }
            contadorQuebrarPagina++;
        }

        return "";
    }

    void MontarDescricao(string descricao)
    {
        <tr>
            <td class="alinhar-esquerda espaco-esquerda-8" colspan="7">@{MontarTextoDescricao(descricao);}</td>
        </tr>
    }
}

<!DOCTYPE html>
<html lang='pt-BR'>
<head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'>
    <title>RELATÓRIO DE NOTIFICAÇÕES</title>
</head>

<body class='body-rel-faltas-frequencia'>
    <style>
        .tblTopo th, td {
            padding: 3px;
            text-align: left;
        }

        .body-relatorio {
            margin: 0.5cm auto;
            font-family: Roboto, sans-serif;
            width: 21cm;
            min-height: 29.7cm;
            background: white;
            color: #42474a;
        }

        .titulo-sgp {
            text-align: right;
            font-size: 14px;
            font-weight: bold;
        }

        .titulo-relatorio {
            text-align: right;
            font-size: 14.5px;
            margin-top: 7px;
        }

        .subtitulo-relatorio {
            text-align: right;
            font-size: 12.5px;
            margin-top: 7px;
        }

        .header-pagina {
            margin-top: 33px;
            margin-bottom: 22px;
        }

            .header-pagina td {
                text-align: left;
            }

        table {
            display: table;
            width: 100%;
            border-color: #42474a;
            empty-cells: show;
            border: none;
            border-collapse: collapse;
        }

        thead {
            background-color: #f3f3f3;
        }

        th {
            border: 1px solid #42474a;
            font-weight: normal;
        }

        td {
            border: 1px solid #42474a;
            text-align: center;
        }

        .tabela-cabecalho tr {
            font-size: 12px;
            height: 24px;
        }

        .mt-25 {
            margin-top: 25px;
        }

        .fonte-14 {
            font-size: 14px !important;
        }

        .alinhar-esquerda {
            text-align: left;
        }

        .espaco-esquerda-15 {
            padding-left: 15px;
        }

        .espaco-esquerda-8 {
            padding-left: 8px;
        }

        .fundo-cinza {
            background-color: #f3f3f3;
        }

        .negrito {
            font-weight: bold;
        }

        .sem-border-bottom {
            border-bottom: 0;
        }

        .sem-border-top {
            border-top: 0;
        }

        .thLimpo {
            background-color: #ffffff;
            border: 0;
            height: 22px;
        }

        .img-logo-sgp {
            height: 64px;
            float: left;
        }

        .centralizar {
            text-align: center;
        }

        .linha-pendencias {
            height: 17px !important;
            font-size: 12px !important;
        }
    </style>
    <div>
        @{
            MontarCabecalho();

            int contadorUsuarios = 0;
            foreach (var usuarios in Model.Usuarios)
            {
                int numerLinhasParaEscrever = 2;
                bool quebraSuperior = VerificaQuebra(numerLinhasParaEscrever);

                if (quebraSuperior)
                {
                    ImprimirQuebra();
                }

                <table class="tabela-cabecalho">
                    <tbody>
                        @{
                            if (contadorUsuarios > 0)
                            {
                                int linhasParaEscreverEspacoBranco = 3;
                                bool quebraEspacoBranco = VerificaQuebra(linhasParaEscreverEspacoBranco);

                                if (quebraEspacoBranco)
                                {
                                    ImprimirQuebra();
                                    @Html.Raw("<table class='tabela-cabecalho'><tbody>");
                                }

                                if(!quebrou)
                                {
                                    LinhaEmBranco();
                                }

                                contadorQuebrarPagina++;
                            }

                            MontarTexto(@usuarios.Nome);

                            contadorQuebrarPagina++;

                            MontarTitulo();

                            contadorQuebrarPagina++;
                        }

                        @foreach (var notificacoes in usuarios.Notificacoes)
                        {
                            var descricao = notificacoes.Descricao;
                            bool temDescricao = String.IsNullOrEmpty(descricao);
                            int linhasParaEscreverNotificacao = 2;
                            bool quebraLinha = VerificaQuebra();

                            if (quebraLinha)
                            {
                                ImprimirQuebra();
                                @Html.Raw("<table class='tabela-cabecalho'><tbody>");
                                MontarTexto(@usuarios.Nome);
                                contadorQuebrarPagina++;
                                MontarTitulo();
                                contadorQuebrarPagina++;
                            }

                            MontarLinhaTabela(notificacoes);

                            contadorQuebrarPagina++;

                            if (!temDescricao)
                            {
                                int linhasParaEscreverDescricao = 2;
                                bool quebraDescricao = VerificaQuebra(linhasParaEscreverDescricao);

                                if (quebraDescricao)
                                {
                                    ImprimirQuebra();
                                    @Html.Raw("<table class='tabela-cabecalho'><tbody>");
                                    MontarTexto(@usuarios.Nome);
                                    contadorQuebrarPagina++;
                                }

                                MontarTexto("DESCRIÇÃO");
                                
                                contadorQuebrarPagina++;

                                MontarDescricao(descricao);
                            }
                         }   
                    </tbody>
                </table>

                contadorUsuarios++;
            }
        }
    </div>
</body>
</html>
